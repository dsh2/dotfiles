set -g prefix C-u
set -g mouse on
set -g mode-keys vi
set -g escape-time 0
set -g base-index 1
set -g pane-base-index 1
set -g renumber-windows on
set -g automatic-rename on
set -g allow-rename on
set -g wrap-search off
set -g history-file ~/.tmux_history
set -g display-panes-time 2222
set -g display-time 2222
set -g history-limit 234545
set -g aggressive-resize on
set -g focus-events on
set -g remain-on-exit off

# Window status line
set -g status on
#set -g status-right 'TODO=#(/Users/dsh0/bin/posteingang_papier_count.sh) #[fg=red]%a %Y-%m-%d %H:%M'
#set -g status-right '#[fg=white]#{pane_tty}(#{pane_id}):#[fg=default]#{pane_current_command} in #{pane_current_path} #[fg=grey]#(sysctl -n vm.loadavg) #[fg=red]%a %Y-%m-%d %H:%M'
#set -g status-right '#[fg=white]#{pane_tty}(#{pane_id}):#[fg=default]#{pane_current_command} #(sysctl -n vm.loadavg) #[fg=red]%a %Y-%m-%d %H:%M'
#set -g status-right '#[fg=red]%a %Y-%m-%d %H:%M'
# set -g status-right '#[fgred]%a %Y-%m-%d %H:%M:%S'
# set -g status-right '[#(hostname)] #[fg=red]W%U %a %Y-%m-%d %H:%M'
# set -g status-right '#[fg=#aea0b0][#(echo $(2> /dev/null acpi -b | sed -nE "s/^.* ([0-9]{1,3}%).*$/\1/p"))] #[fg=white][#(hostname)] #[fg=red]W%U %a %Y-%m-%d %H:%M'
set -g status-right '#[fg=#aea0b0][#(echo $(2> /dev/null acpi -b | sed -nE "s:^.*, ([0-9:]*) (remaining|until charged):\1:p"))] #[fg=white][#(hostname)] #[fg=red]W%U %a %Y-%m-%d %H:%M'
set -g status-right-length 75
set -g status-left-length 18
set -g status-left "[#S] "
set -g status-keys vi
set -g status-position bottom
set -g window-status-current-format '#[fg=red]#[bg=yellow]#{?window_zoomed_flag,Z,}#[bg=default]#I#[fg=black]#[bg=red]#W'
set -g window-status-format '#{?window_zoomed_flag,Z,}#[fg=red]#I#[fg=default]#W'

# Pane status line
# TODO: try to understand why run-shell is only executed on reload of conf file
# run-shell -b tmux-pane-format.sh 
# set -g  pane-border-format '#{pane_id}: #{pane_tty}(#{pane_width}x#{pane_height}): #{pane_current_command}(#{pane_pid}) #{pane_current_path} '
set-window-option -g pane-border-format '[#{pane_tty}: #{pane_current_command} (#{pane_pid}) #{pane_current_path} #{pane_width}x#{pane_height} #{pane_id}#{?pane_synchronized, SYNC,}]'

# Key bindings
bind -n M-j select-pane -D
bind -T copy-mode-vi M-j select-pane -D
bind -n M-k select-pane -U
bind -T copy-mode-vi M-k select-pane -U
bind -n M-h select-pane -L
bind -T copy-mode-vi M-h select-pane -L
bind -n M-l select-pane -R
bind -T copy-mode-vi M-l select-pane -R
bind -r M-j resize-pane -D 5
bind -n M-J resize-pane -D 5
bind -r M-k resize-pane -U 5
bind -n M-K resize-pane -U 5
bind -r M-h resize-pane -L 5
bind -n M-H resize-pane -L 5
bind -r M-l resize-pane -R 5
bind -n M-L resize-pane -R 5
# bind -n M-p copy-mode
bind = choose-buffer "paste-buffer -pb '%%'"
bind -n M-p copy-mode\; send-keys -X start-of-line\; 
bind -n C-M-B copy-mode\; send-keys -X start-of-line\; send-keys -X search-backward "ðŸ˜Ž"
# bind -n C-M-b copy-mode\; send-keys -X start-of-line\; send-keys -X search-backward 
# bind -T copy-mode-vi J send-keys -X page-up
# bind -T copy-mode-vi K send-keys -X page-down
# bind -T copy-mode-vi C-b send-keys -X page-up
# bind -T copy-mode-vi C-f send-keys -X page-down
# bind -T copy-mode-vi C-r send-keys -X search-backward-incremental
# bind -T copy-mode-vi I send-keys -X search-backward-incremental
# bind -T copy-mode-vi O send-keys -X search-forward-incremental
bind -n M-P paste-buffer
bind -n M-w new-window -n "choose-pane" '$SHELL -ic "ftpane"'
#bind -n M-u capture-pane \; save-buffer /tmp/tmux-buffer \; new-window -n "urlview" '$SHELL -c "urlview < /tmp/tmux-buffer"'
bind -n M-n run "tmux new-window"
bind -n M-O new-session
bind -n M-z resize-pane -Z
#bind -t M-m command-prompt -p "Swap this window with window:"  "swap-window -t '%%'"
bind < swap-window -t -1
bind > swap-window -t +1
# bind { swap-pane
bind r source ~/.tmux.conf \; display-message ".tmux.conf reloaded."
bind R refresh-client \; display-message "tmux-client refreshed."
bind o command-prompt -p "Name of new session:" 'new-session -s "%%"'
bind O detach-client -a
# bind M command-prompt -p "Name of new session to move window to:" 'new-session -A -s "%1"\; move-window -t "%1:" \; switch-client -t "%1" bind K kill-session; attach-session'
bind , command-prompt -I "#W" "rename-window -- '%%'"
bind j choose-window "join-pane -v -s '%%'"
bind J choose-window "join-pane -h -s '%%'"
# TODO: Does not switch to target session. :(
bind m choose-session 'move-window -t "%1:" \; switch-client -t "%1" \; display-message "target session = %1"'
bind l choose-session 'link-window -t '%%''
bind L unlink-window 
bind e set-window-option synchronize-panes
bind C-i confirm-before -p "kill-pane '#W' (#{pane_tty})? (y/n)" kill-pane
bind I confirm-before -p "kill-pane '#W' (#{pane_tty})? (y/n)" split-window \; last-pane \; kill-pane
bind X confirm-before -p "kill-WINDOW '#W' (#{pane_tty})? (y/n)" kill-window
bind C-p set -w pane-border-status
bind C-s set-window-option status
# TODO: Make f search only current pane
bind c-f new-window -n "fzf-pane" tmux-fzf-panes.sh
bind f new-window -n "fzf-all-panes" tmux-fzf-panes.sh --all
# bind C-f run-shell "~/bin/tmux-fzf-panes.sh"
bind c-c run-shell -b tmux-random-background-color.sh
bind c select-pane -P default
bind x run-shell tmux-cross-over.sh
# bind = new-window -n choose-pane '$SHELL -ic tmux-select-buffer.sh'

bind m select-pane -m
bind M swap-pane
bind ! break-pane
bind @ break-pane -d
bind h break-pane -d 

bind -n M-1 previous-window
bind -n M-2 next-window
bind -n M-3 last-window
bind -n M-4 last-pane
bind -n M-q last-pane
bind -n M-5 switch-client -l
# Add colors to choose-tree - FIXME: Does not work :(
# bind -n M-0 choose-tree -u -S '#[fg=white]#{session_name}#[fg=grey]: #{session_windows} windows #{?session_grouped, (group ,}#{session_group}#{?session_grouped,),}#{?session_attached, (attached),}' -W '#{window_index}: #{window_name}#{window_flags} \"#{pane_title}\"'
bind -n M-6 run "tmux new-window -c '#{pane_current_path}'"
bind M-7 run "tmux split-window -bhc '#{pane_current_path}'"
bind -n M-7 run "tmux split-window -hc '#{pane_current_path}'"
bind M-8 run "tmux split-window -bvp 41 -c '#{pane_current_path}'"
bind -n M-8 run "tmux split-window -vp 41 -c '#{pane_current_path}'"
bind -n M-9 choose-tree -w
bind -n M-0 choose-tree -s
# TODO: The following mapping does not work anymore
# bind -n M-0 choose-tree -s -S '#{session_name}: #{session_windows} windows #{?session_grouped, (group ,}#{session_group}#{?session_grouped,),}#{?session_attached, (attached),}' -W '#{window_index}: #{window_name}#{window_flags} \"#{pane_title}\"'
bind C-u set-option -g prefix C-o \; \
	unbind -a \; \
	unbind -T root -a \; \
	set -g status-left "#[fg=red]!DETACHED! #[fg=yellow][#S] "\; \
	bind C-o source ~/.tmux.conf\; \
	set-option -g status-bg colour16 \; \
	display-message "Detached all keybindings."\;

# Necessary default key bindings
bind-key    -T prefix       C-b               send-prefix
bind-key    -T prefix       C-z               suspend-client
bind-key    -T prefix       Space             next-layout
bind-key    -T prefix       C-Space           next-layout
# FIXME: binding $ yields unkown key error message
# bind-key    -T prefix       $                 command-prompt -I "#S" "rename-session -- '%%'"
bind-key    -T prefix ,                       command-prompt -I "#W" "rename-window -- '%%'" 
bind-key    -T prefix .                       command-prompt -p "(rename-pane)" -I "#T" "select-pane -T '%%'"
bind-key    -T prefix       0                 select-window -t :=0
bind-key    -T prefix       1                 select-window -t :=1
bind-key    -T prefix       2                 select-window -t :=2
bind-key    -T prefix       3                 select-window -t :=3
bind-key    -T prefix       4                 select-window -t :=4
bind-key    -T prefix       5                 select-window -t :=5
bind-key    -T prefix       6                 select-window -t :=6
bind-key    -T prefix       7                 select-window -t :=7
bind-key    -T prefix       8                 select-window -t :=8
bind-key    -T prefix       9                 select-window -t :=9
bind-key    -T prefix       :                 command-prompt
bind-key    -T prefix       d                 detach-client
bind-key    -T prefix       ?                 list-keys
bind-key    -T prefix       q                 display-panes
bind-key    -T prefix       t                 clock-mode
bind-key    -T prefix       w                 choose-tree -Zw
bind-key    -T prefix       z                 resize-pane -Z
<<<<<<< Updated upstream
# bind-key    -T prefix       '}'                 swap-pane -D
=======
# bind-key    -T prefix       }                 swap-pane -D
>>>>>>> Stashed changes
bind-key    -T prefix       PPage             copy-mode -u
bind-key -r -T prefix       Up                select-pane -U
bind-key -r -T prefix       Down              select-pane -D
bind-key -r -T prefix       Left              select-pane -L
bind-key -r -T prefix       Right             select-pane -R
bind-key    -T prefix       M-1               select-layout even-horizontal
bind-key    -T prefix       M-2               select-layout even-vertical
bind-key    -T prefix       M-3               select-layout main-horizontal
bind-key    -T prefix       M-4               select-layout main-vertical
bind-key    -T prefix       M-5               select-layout tiled
bind-key    -T prefix       M-o               rotate-window -D
bind-key    -T root         MouseDown1Pane    select-pane -t = \; send-keys -M
bind-key    -T root         MouseDown1Status  select-window -t =
bind-key    -T root         MouseDown3Pane    if-shell -F -t = "#{mouse_any_flag}" "select-pane -t=; send-keys -M" "select-pane -mt="
bind-key    -T root         MouseDrag1Pane    if-shell -F -t = "#{mouse_any_flag}" "if -Ft= \"#{pane_in_mode}\" \"copy-mode -M\" \"send-keys -M\"" "copy-mode -M"
bind-key    -T root         MouseDrag1Border  resize-pane -M
bind-key    -T root         WheelUpPane       if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= \"#{pane_in_mode}\" \"send-keys -M\" \"copy-mode -et=\""
bind-key    -T root         WheelUpStatus     previous-window
bind-key    -T root         WheelDownStatus   next-window

set -g default-terminal "screen-256color"
# set-option -sa terminal-overrides ',xterm-256color:RGB'
set-option -g lock-command "vlock -s"
set-option -g lock-after-time 200

# Enable activity alerts
setw -g monitor-activity off
set -g visual-activity off

# default statusbar colors
# set-option -g status-bg colour235 #base02
# set-option -g status-fg colour136 #yellow
# set-option -g status-attr default
set -g status-style "bg=colour235,fg=colour136"

# default window title colors
# set-window-option -g window-status-fg colour244 #base0
# set-window-option -g window-status-bg default
# set-window-option -g window-status-attr dim
set-window-option -g window-status-style "fg=colour244,dim"

# active window title colors
# set-window-option -g window-status-current-fg colour166 #orange
# set-window-option -g window-status-current-bg default
# set-window-option -g window-status-current-attr bright
set-window-option -g window-status-separator "|"
set-window-option -g window-status-current-style "fg=colour166,bright"

# pane border
set-option -g pane-active-border-style "fg=#00c000,bg=black"
set-option -g pane-border-style "fg=#a02222,bg=black"
# set-option -g pane-border-status off
set-window-option -g pane-border-status top

# message text
# set-option -g message-bg colour235 #base02
# set-option -g message-fg colour166 #orange
set-option -g message-style "fg=colour166,bg=colour235"

# pane number display
set-option -g display-panes-active-colour colour33 #blue
set-option -g display-panes-colour colour166 #orange

# clock
set-window-option -g clock-mode-colour colour64 #green
