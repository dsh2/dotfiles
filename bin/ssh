#!/bin/zsh
# Wrapper around ssh to start one ssh-agent for earch host to limit key(-operation) exposure

err_out() { print -u 2 "$*"; exit 1; }
# set -x
setopt errexit

# Search for real ssh binary
zmodload zsh/stat
me=$( stat +inode $0 )
for s in $( whence -a ssh ); do (( $me == $(stat +inode $s) )) || ssh=$s; done
[[ -n $s ]] || err_out "No ssh available"

# Search for target host
vars=(${(f)"$($ssh -G $*)"})
(( #vars > 0 )) && {
	# Convert ssh vars into zsh assoc array
	typeset -A v
	for l in $vars; do 
		kv=(${(z)l})
		v["${kv[1]}"]=${kv[2,-1]}
	done
}
host=${v["hostkeyalias"]:=${v["hostname"]}}
[[ -n $host ]] || { print -rl -- $vars ; err_out "Host not found" ; }
 
# Ensure a working ssh-agent for host
agents_dir=~/.ssh/agents
mkdir -p $agents_dir{,/logs}
[[ -z $SSH_AUTH_SOCK ]] && export SSH_AUTH_SOCK=$agents_dir/$host
[[ -S $SSH_AUTH_SOCK ]] && ssh-add -ql >/dev/null || { fuser -k $SSH_AUTH_SOCK &>/dev/null || true ; rm -f $SSH_AUTH_SOCK }
[[ -S $SSH_AUTH_SOCK ]] || ssh-agent -da $SSH_AUTH_SOCK |& ts -m '%F %T' >> $agents_dir/logs/$host & 
[[ -t 1 && -v SSH_AGENT_VERBOSE ]] && {
	echo "Agent for host \"$host\" has the following identities loaded [$SSH_AUTH_SOCK]:"
	typeset -p SSH_AUTH_SOCK
	ssh-add -L || true
}

# Execute original user command
$ssh $* 
