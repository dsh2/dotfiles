# ADB connection helper
# - Overcome adb/adbd version mismatches via adb port forwarding
# - Mount ADBFS
# - Setup scrcpy session
# - Set tmux pane title
# - Update env vars

# Usage:
# [adb_host=<some_user@>some_host] source tcp_adb

: ${adb_host:=localhost}
: ${scrcpy:=yes}
: ${root:=no}
: ${sudo:=}

null="/dev/null"

[[ -v x ]] && { PS4="+ " ; set -x ; }

# ai = Android info
ai() {
	typeset -p ADB_ID ADB_ID_U ADB_PRODUCT_MODUL ADB_FINGERPRINT ADB_TCP_HOST ADB_TCP_PORT
	adb shell <<-EOF
		getprop ro.serialno
		getprop ro.build.fingerprint
		getprop | grep build\.version
		id
	EOF
}

has() { type "$1" &> $null ; }

# ac = Android connect (scrcpy+adbfs+tmux-pane)
ac() {
	ADB_ID=$( adb shell id )
	ADB_ID_U=$( adb shell id -u )
	ADB_PRODUCT_MODUL=$( adb shell getprop ro.product.model )
	ADB_FINGERPRINT=$( adb shell getprop ro.build.fingerprint )
	ADB_SERIAL=$( adb shell getprop ro.serialno )
	ADB_TCP_HOST=$adb_host
	ADB_TCP_PORT=$port

	[ "yes" = $scrcpy ] && has scrcpy && {
		pgrep -f "scrcpy.*--tcpip=$sa" ||
			 scrcpy --window-title "[$adb_host:$port] id=$ADB_ID_U $ADB_SERIAL $ADB_PRODUCT_MODUL $ADB_FINGERPRINT" \
				--turn-screen-off \
				--disable-screensaver \
				--shortcut-mod=rctrl \
				--tcpip=$sa > $null &
			}

	has adbfs && {
		adbfs_path=~/mnt/ADBFS/$adb_host@$ADB_SERIAL
		$sudo umount -R $adbfs_path 2>$null || true
		mountpoint -q $adbfs_path || {
			mkdir -p $adbfs_path
			adbfs $adbfs_path
		}
		echo ls $adbfs_path
		ls -lh $adbfs_path
		alias cda="cd $adbfs_path"
	}

	has tmux && {
		current_tmux_pane=$(tmux list-pane -F '#{pane_id}' -f "#{m:$TTY,#{pane_tty}}" 2>$n)
		[[ -n $current_tmux_pane ]] && tmux select-pane -t $current_tmux_pane -T "ADB: $ADB_PRODUCT_MODUL @ $ADB_TCP_HOST"
	}

}

ssh=( ssh $v -o PermitLocalCommand=no -o ControlMaster=auto -o BatchMode=yes -T $adb_host )
$ssh true || { echo "ssh $adb_host failed."; set +x; return 9; }

# Determine remote tcp_serial(s)
adb reconnect offline ; sleep 0.1
remote_ids=( $( $ssh adb devices -l | tail -n+2 | awk -F: '{print $(NF)}' ) )
# tcp_serials=( $( $ssh adb devices 2> $null | tail -n+2 | cut -f 1) )
[[ ${#remote_ids} -eq 0 ]] && { echo "No ADB devices available for/at $adb_host"; set +x; return 9; }
[[ ${#remote_ids} -gt 1 ]] && {
	if [[ -z $tcp_serial && -z $tcp_id ]]; then
		if [[ "$adb_all" != yes ]]; then
			echo "Set \"adb_all=yes\" or tcp_serial / tcp_id to one of these:"
			$ssh adb devices -l
			return 9
		fi
	elif [[ "$adb_all" = yes ]]; then
		echo "NOTE: tcp_serial=$tcp_serial/tcp_id=$tcp_id will overwrite adb_all=yes."
	fi
}
random_port() { shuf -i 62000-65000 -n 1 ; }

connected_serials=()
for remote_id in ${remote_ids[@]}; do
	# [[ $adb_all != yes ]] || [[ ${#devices} -eq 1 ]] && [[ -n $tcp_serial ]] && [[ $serial != $tcp_serial ]] && continue
	radb=( $ssh timeout 2 adb -t $remote_id )
	adb_real_serial=$( $radb shell getprop ro.serialno ) || { echo "ADB connection on remote host failed for transport id $remote_id and serial=$adb_real_serial."; continue; }

	# [[ $adb_all == yes ]] && do
	# [[ $#remote_ids -eq 1 ]] && do
	# [[ $tcp_serial = $adb_real_serial ]] && do
	# [[ $tcp_id = $remote_id ]] && do

	[[ $adb_all != yes ]] && [[ $#remote_ids -ne 1 ]] && [[ $tcp_serial != $adb_real_serial ]] && [[ $tcp_id != $remote_id ]] && continue

	echo "Trying to setup forwarding for device on $adb_host with transport id $remote_id and serial=$adb_real_serial"

	# Ensure that remote ADB connection is running in TCP mode
	$radb shell true || { echo "ADB connection on remote host failed for transport id $remote_id and serial=$adb_real_serial."; continue; }
	case $adb_real_serial in
		(12345678) port=12345 ;;
		(3406e821) port=34821 ;;
		(5a7dfd6e) port=62204 ;;
		(GX290Pro0033407) port=62881 ;;
		(GX4CTR201011) port=61011 ;;
		(GX4CTR500729) port=62882 ;;
		(GX4CTR900807) port=62807 ;;
		(GX4PCTR200360) port=62049 ;;
		(GX4PCTR200605) port=62605 ;;
		(MT37EM120007) port=62007 ;;
		(MT37EM12000Q) port=62000 ;;
		(MT37EM120024) port=62024 ;;
		(MT37EM120031) port=62031 ;;
		(MT37EM12004X) port=62004 ;;
		(MT37EM12005H) port=62005 ;;
		(MT37EM12006S) port=12006 ;;
		(MT3AGS12004J) port=62003 ;;
		(MTT23S12002G) port=62002 ;;
		(PVS44XROGIRGZTS4) port=63919 ;;
		(*) port=$( random_port ) ;;
	esac
	current_port=$( $radb shell getprop service.adb.tcp.port )
	# Try to reset port to the determined one
	if [[ -z $current_port ]]; then
		$radb tcpip $port
	elif [[ $current_port != $port ]]; then 
		$radb shell setprop service.adb.tcp.port $port
		$radb shell setprop ctl.restart adbd
	fi
	# ADB will increase transport ID after switch to TCP/IP
	until [ -n $remote_id ] && $ssh timeout 2 adb -t $remote_id shell true; do
		sleep 0.2
		remote_id=$( $ssh adb devices -l | sed -nE "/$adb_real_serial/s|.*:([0-9]+)$|\1|p" )
		(( ii++ < 20 )) || {
			echo "Failed to update remote_id for $adb_real_serial after switch to TCP/IP."
			set +x
			return 1
		}
	done
	# tadb is the same (now, after resetting remote_id) as radb but without ssh prefix, i.e.
	# it is only meant to be used within the following ssh session
	tadb="adb -t $remote_id"

	# Establish new forwardings (unless port is already in use)
	sa=127.0.0.1:$port
	$ssh -L $sa:$sa <<< $sudo ANDROID_SERIAL=$adb_real_serial sh -x <<-EOF
		[ -n "$x" ] && { set -x ; PS4=+R+\ ; }
		# Warn about active ssh port forwardings from other users
		ps -Csshd -opid=,uid= | while read pid uid; do
			[ \$uid -eq \$( id -u ) ] && continue
			$sudo lsof -P -n -i -a -Fn -p \$pid 2> $null | grep -q "^n.*$port" && {
				echo "WARNING: Forwarding for port $port already active of other user:"
				ps u \$pid
			}
		done
		if [ "yes" = $root ]; then
			test \$( $tadb shell id -u ) -eq 0 ||
				$tadb root ||
				 echo "WARNING: Failed to restart adb as root."
		fi
		# Try hard to establish ADB forwarding
		while ! $tadb forward --list | grep -q tcp:$port; do
			# BUG: adb foward will fail with "more than one device" even when
			# transport id is unique
			$tadb forward tcp:$port tcp:$port
			sleep 0.1
		done
		# rssh_port=\$( $tadb shell ss -tnlpHAtcp state listening | sort -k3r | sed -nE '/^.*\*:(22[0-9]{2}).*$/s::\1:p' | head -n+1 ) && (( rssh_port++ > 0 )) || rssh_port=2200
		# $tadb reverse tcp:\$rssh_port tcp:22
	EOF
	(( $? )) && { echo "SSH failed"; set +x; return 1; }
	lsof -i :$port > $null || { echo "SSH port forwarding (port=$port) to ADB is not active."; set +x; return 9; }

	echo "Connecting locally via ADB port-forwarding..."
	adb connect $sa || {
		echo "Failed to connect to remote_id $remote_id via local ADB port-forwarding"
		continue
	}
	export ANDROID_SERIAL=$sa
	adb shell true || {
		echo "Failed to shell into remote_id $remote_id"
		continue
	}
	# TODO:
	# adb_win="$(wslvar USERPROFILE)\\AppData\\Local\\Android\\Sdk\\platform-tools\\adb.exe"
	# cmd.exe /a /c $adb_win connect $sa
	connected_serials+=( $adb_real_serial )
	ac
	ai
done
adb_real_serial=$connected_serials[1]
typeset -p connected_serials

set +x
# vim: ft=zsh
