[Commands]
1\Command="copyq: \nvar imageData = screenshot()\nwrite('image/png', imageData)\ncopy('image/png', imageData)\n"
1\GlobalShortcut=print
1\Icon=\xf030
1\IsGlobalShortcut=true
1\Name=Take screenshot
10\Automatic=true
10\Command="copyq: execute(\"/usr/bin/vlc\", clipboard())\n"
10\Icon=\xf15b
10\InMenu=true
10\Match=^https://.*.youtube.com/.*
10\Name=YouTube2Vlc
10\Shortcut=alt+v
11\Automatic=true
11\Command=copyq open %1
11\Enable=false
11\HideWindow=true
11\Icon=\xf144
11\InMenu=true
11\Match=^http://.*\\.(mp4|avi|mkv|wmv|flv|ogv)$
11\Name=Autoplay videos
12\Command=copyq: plugins.itemtags.tag()
12\Icon=\xf02b
12\InMenu=true
12\Name=Add a Tag
12\Shortcut=f2
13\Automatic=true
13\Command="copyq:\nvar time = dateString('yyyy-MM-dd hh:mm:ss')\nsetData('application/x-copyq-user-copy-time', time)\n\nvar tagsMime = 'application/x-copyq-tags'\nvar tags = str(data(tagsMime)) + ', ' + time\nsetData(tagsMime, tags)"
13\Icon=\xf017
13\Name=Store Copy Time
14\Automatic=true
14\Enable=false
14\Icon=\xf03e
14\Input=image/png
14\Name=Move Images to Other Tab
14\Remove=true
14\Tab=&Images
15\Automatic=true
15\Command="copyq:\nvar window = str(data('application/x-copyq-owner-window-title'))\nvar tagsMime = 'application/x-copyq-tags'\nvar tags = str(data(tagsMime)) + ', ' + window\nsetData(tagsMime, tags)"
15\Icon=\xf009
15\Name=Store Window Title
16\Automatic=true
16\Icon=\xf03e
16\InMenu=true
16\Input=image/png
16\Name=Move Images to Other Tab
16\Remove=true
16\Tab=&Images
17\Command=copyq: menu()
17\GlobalShortcut=ctrl+alt+h
17\Icon=\xf01c
17\IsGlobalShortcut=true
17\Name=Show the tray menu
18\Command=copyq: toggle()
18\GlobalShortcut=ctrl+alt+p
18\Icon=\xf022
18\IsGlobalShortcut=true
18\Name=Show/hide main window
19\Command=copyq: plugins.itemencrypted.encryptItems()
19\Icon=\xf023
19\InMenu=true
19\Input=!OUTPUT
19\Name=Encrypt (needs GnuPG)
19\Output=application/x-copyq-encrypted
19\Shortcut=ctrl+l
2\Automatic=true
2\Command="copyq: \n  function lz(s) { return (s.length == 1 ? \"0\"+s : s ) }\n  function lzz(s) { return (s.length == 2 ? \"20\"+s : s ) }\n  var text = str(clipboard())\n  var dateRe = new RegExp('^([0-9]{1,2})\\.([0-9]{1,2})\\.([0-9]{2,4})$')\n  var res = dateRe.exec(text)\n  var result = lzz(res[3]) \n  var result = lzz(res[3]) + \"-\" + lz(res[2]) + \"-\" + lz(res[1])\n  copy(result)\n  execute(\"notify-send\", result)\n"
2\Icon=\xf15b
2\InMenu=true
2\Match="^[0-9]{1,2}\\.[0-9]{1,2}\\.[0-9]{2,4}$"
2\Name=UnifyDate
20\Command=copyq: plugins.itemencrypted.decryptItems()
20\Icon=\xf09c
20\InMenu=true
20\Input=application/x-copyq-encrypted
20\Name=Decrypt
20\Output=application/x-copyq-item
20\Shortcut=ctrl+l
21\Command=copyq: plugins.itemencrypted.copyEncryptedItems()
21\Icon=\xf13e
21\InMenu=true
21\Input=application/x-copyq-encrypted
21\Name=Decrypt and Copy
21\Shortcut=ctrl+shift+l
22\Command=copyq: plugins.itemencrypted.pasteEncryptedItems()
22\Enable=false
22\Icon=\xf13e
22\InMenu=true
22\Input=application/x-copyq-encrypted
22\Name=Decrypt and Paste
22\Shortcut=enter
23\Command=copyq open %1
23\HideWindow=true
23\Icon=\xf0ac
23\InMenu=true
23\Name=Open in &Browser
23\Shortcut=alt+b
24\Command="copyq: \nvar text = clipboard()\ncopy(text)\ncopySelection(text)\npaste()"
24\GlobalShortcut=ctrl+alt+v
24\Icon=\xf0ea
24\IsGlobalShortcut=true
24\Name=Paste clipboard as plain text
25\Command="copyq:\nvar text = input()\ncopy(text)\ncopySelection(text)\npaste()"
25\Enable=false
25\GlobalShortcut=ctrl+l
25\HideWindow=true
25\Icon=\xf0ea
25\InMenu=true
25\Input=text/plain
25\IsGlobalShortcut=true
25\Name=Paste as Plain Text
25\OutputTab=&clipboard
26\Command=copyq: showAt()
26\GlobalShortcut=meta+ctrl+p
26\Icon=\xf022
26\IsGlobalShortcut=true
26\Name=Show main window under mouse cursor
27\Command="copyq: \nvar imageData = screenshotSelect()\nwrite('image/png', imageData)\ncopy('image/png', imageData)\n"
27\GlobalShortcut=ctrl+print
27\Icon=\xf030
27\IsGlobalShortcut=true
27\Name=Take screenshot selection
28\Icon=\xf1f8
28\InMenu=true
28\Name=Move to Trash
28\Remove=true
28\Shortcut=ctrl+x
28\Tab=(trash)
29\Command=copyq: plugins.itempinned.pin()
29\Icon=\xf08d
29\InMenu=true
29\Input=!OUTPUT
29\Name=Pin
29\Output=application/x-copyq-item-pinned
3\Command="copyq:\nfromLanguage = 'auto'\ntoLanguage = 'en'\n\ntext = str(input())\nurl = 'https://translate.google.com/#view=home&op=translate'\n    + '&sl=' + fromLanguage\n    + '&tl=' + toLanguage\n    + '&text=' + encodeURIComponent(text)\nopen(url)"
3\Icon=\xf558
3\InMenu=true
3\Input=text/plain
3\Name=Translate to English
3\Shortcut=ctrl+shift+e
30\Command=copyq: plugins.itempinned.unpin()
30\Icon=\xf08d
30\InMenu=true
30\Input=application/x-copyq-item-pinned
30\Name=Unpin
31\Command=copyq: plugins.itemtags.tag(decodeURIComponent('%5C1'))
31\Icon=\xf02b
31\InMenu=true
31\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('%5C1')) && fail()
31\Name=Tag as \x201c\\1\x201d
32\Command=copyq: plugins.itemtags.untag(decodeURIComponent('%5C1'))
32\Icon=\xf02b
32\InMenu=true
32\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('%5C1')) || fail()
32\Name=Remove tag \x201c\\1\x201d
33\Command=copyq: plugins.itemtags.untag()
33\Icon=\xf02b
33\InMenu=true
33\Input=application/x-copyq-tags
33\Name=Remove a Tag
34\Command=copyq: plugins.itemtags.clearTags()
34\Icon=\xf02b
34\InMenu=true
34\Input=application/x-copyq-tags
34\Name=Clear all tags
35\Command=copyq: edit()
35\Icon=\xf069
35\IsGlobalShortcut=true
35\Name=Create new item
4\Automatic=true
4\Command="copyq:\nvar tabName = '&url'\n\nfunction lower(data) {\n  return str(data).toLowerCase()\n}\n\nfunction findHeader(reply, headerName) {\n  reply.data // fetches data and headers\n  var headers = reply.headers\n  for (var i in headers) {\n    var header = headers[i]\n    if (lower(header[0]) === headerName)\n       return header[1]\n  }\n  return ''\n}\n\nfunction isHtml(reply) {\n  var header = findHeader(reply, 'content-type')\n  if (header)\n    return lower(header).indexOf(mimeHtml) === 0\n  return false\n}\n\nfunction fetchContent(url, maxRedirects) {\n  if (maxRedirects === undefined)\n    maxRedirects = 4\n\n  var reply = networkGet(url)\n  if (maxRedirects == 0)\n    return reply\n  var header = findHeader(reply, 'location')\n  if (header)\n    return fetchContent(header, maxRedirects - 1)\n\n  return reply\n}\n\nfunction grep(content, re) {\n  return content ? (re.exec(content) || [])[1] : ''\n}\n\nfunction getTitle(content) {\n  var title = grep(content, /<title[^>]*>([^<]*)<\\/title>/i)\n  return title ? title.trim() : ''\n}\n\nfunction getFavicon(content) {\n  var iconLine = grep(content, /<link([^>]*rel=[\"'](?:shortcut )?icon[\"'][^>]*)/i)\n  var icon = grep(iconLine, /href=[\"']([^\"']*)/i)\n\n  if (!icon)\n    return ''\n\n  // Icon path can be complete URL.\n  if (icon.indexOf('://') != -1)\n    return fetchContent(icon).data\n\n  // Icon path can be missing protocol.\n  if (icon.substr(0, 2) === '//') {\n    var i = url.search(/\\/\\//)\n    var protocol = (i == -1) ? 'http:' : url.substr(0, i)\n    return fetchContent(protocol + icon).data\n  }\n\n  // Icon path can be relative to host URL.\n  if (icon[0] === '/') {\n    var baseUrl = url.substr(0, url.search(/[^\\/:](\\/|$)/) + 1)\n    return fetchContent(baseUrl + icon).data\n  }\n\n  // Icon path can be relative to current URL.\n  var baseUrl = url.substr(0, url.lastIndexOf('/') + 1)\n  return fetchContent(baseUrl + icon).data\n}\n\nvar url = str(input()).trim()\n\n// URL already added? (Just check the top of the list.)\nif (url === str(read(0)))\n  abort()\n\n// Fetch HTML.\nvar reply = fetchContent(url)\nif (isHtml(reply)) {\n  var content = str(reply.data)\n  var title = getTitle(content)\n  var icon = getFavicon(content)\n\n  setData(mimeItemNotes, title || '')\n  setData('application/x-copyq-item-icon', icon)\n}\n\nsetData(mimeOutputTab, tabName)"
4\Enable=false
4\Icon=\xf0c1
4\Input=text/plain
4\Match=^https?://
4\Name=Tab for URLs with Title and Icon
5\Command="copyq:\nvar indent = 4\n\nfunction fromData(data)\n{\n  var text = str(data)\n  if ( data.equals(new ByteArray(text)) ) {\n    if (text.indexOf('\\n') == -1)\n      return text\n    return { lines: text.split('\\n') }\n  }\n  return { base64: toBase64(data) }\n}\n\nvar itemsData = selectedItemsData()\nfor (var i in itemsData) {\n  var itemData = itemsData[i]\n  for (var format in itemData)\n    itemData[format] = fromData(itemData[format])\n}\n\nvar text = JSON.stringify(itemsData, null, indent)\ncopy('{ \"copyq_items\": ' + text + ' }')"
5\Display=true
5\Enable=false
5\Icon=\xf2f5
5\InMenu=true
5\Name=Copy Items as JSON
6\Command="copyq: \ncopy('Hello, World!')\nadd('Hello, World!')\npaste()"
6\GlobalShortcut=meta+ctrl+alt+v
6\Icon=\xf2f6
6\InMenu=true
6\IsGlobalShortcut=true
6\MatchCommand=copyq: str(clipboard()).match(/^{ \"copyq_items\": \\[\\n/) || fail()
6\Name=Paste Joined with Comma
7\Command="copyq:\nvar language = 'eng'\n\nvar imageData = input()\nvar result = execute('tesseract', '--list-langs')\nvar languages = str(result.stdout).split('\\n').slice(1)\n\nresult = execute('tesseract', '-l', language, 'stdin', 'stdout', null, data('image/png'))\nadd(result.stdout)\ncopy(result.stdout)"
7\Enable=false
7\GlobalShortcut=ctrl+alt+t
7\Icon=\xf1ea
7\InMenu=true
7\IsGlobalShortcut=true
7\Name=Copy Text from Image (&OCR)
8\Command="import png:- | convert png:- -colorspace Gray -depth 8 -resample 200x200 tif:- | copyq:\nvar language = 'eng'\n\nvar imageData = input()\nvar result = execute('tesseract', '--list-langs')\nvar languages = str(result.stdout).split('\\n').slice(1)\n\nresult = execute('tesseract', '-l', language, 'stdin', 'stdout', null, imageData)\nadd(result.stdout)\ncopy(result.stdout)"
8\GlobalShortcut=alt+shift+t, ctrl+alt+t
8\Icon=\xf1ea
8\IsGlobalShortcut=true
8\Name=Copy Text from Screen Selection
9\Command="copyq: paste();"
9\Icon=\xf0ab
9\IsGlobalShortcut=true
9\Name=Paste non-plain
size=35
