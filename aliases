# vim: se ft=sh:

UNAME=$(uname)
: "${TMPDIR:=/tmp}"

LS_COMMAND=ls
if [ "$UNAME" = "Darwin" ]; then
	# TODO: check if gnu core utils is installed
	alias find=gfind
	alias locate=glocate
	LS_COMMAND=gls
	alias sed=gsed
	alias tac=gtac
	# Switch profile of running iTerm2 window
	it2prof() { printf '\033]50;SetProfile=$@\a'; }
fi

if [ "$OSTYPE" = "cygwin" ]; then
	alias sudo="cygstart --action=runas"
fi

# Change directory
alias .....='cd ../../../..'
alias ....='cd ../../..'
alias ...='cd ../..'
alias ..='cd ..'
alias cdd=popd
alias cdv='cd $(prl $dirstack | fzf)'
source ~/.dotfiles/z/z.sh

# AOSP
alias aosp='cd "$AOSP_HOME" && source build/envsetup.sh && export OUT_DIR_COMMON_BASE="$AOSP_HOME/out.$MYHOSTNAME"'

# alias adbk='adb shell input keyboard text \"\"'
# alias adf=adbfs
adf() {
	[[ -z $ANDROID_SERIAL ]] && {
		print -u "Please set ANDROID_SERIAL"
		return 1
	} 
	adbfs_mnt=/ADBFS/$ANDROID_SERIAL 
	mkdir -p $adbfs_mnt
	adb shell id
	sudo -E adbfs -o allow_other -o auto_unmount $adbfs_mnt
	${EDITOR:-nvim} $adbfs_mnt
}
alias af=adbfs
alias adkl=adbk
alias adke='adb shell input keyevent'
alias adbke='adb shell input keyevent'
alias adk=adbk
adbk() { timeout 3 adb shell input keyboard text "${(q)*}$'\n'" }
# adbk() { adb shell input keyboard text "${(q)*}" && adb shell input keyevent KEYCODE_ENTER ; }
alias adkp="adb shell input keyboard text \\\"\$(cat | tr -c '[\\r\\n[:space:][:graph:]]' '_')\\\""
# alias adl='adb_real_serial=$(adb shell getprop ro.serialno) && logcat=~/.logs/adb/$(nn)-$adb_real_serial.log.gz ; typeset -p logcat ; adb logcat | ( gzip | tee $logcat ) | lnav -q'
alias adl='adb_real_serial=$(adb shell getprop ro.serialno) && logcat=~/.logs/adb/$(nn)-$adb_real_serial.log.gz ; typeset -p logcat ; echo $logcat ; adb logcat > >( gzip > $logcat ) | lnav -q' 
alias adll='noglob adb logcat | lnav'
alias adld='logcat=$(nn)_logcat.txt; noglob adb logcat -d > $logcat && nvim -c "se ft=strace" $logcat'
alias adldl='noglob adb logcat -d | vim -c "se ft=strace" -'
# alias add='adb devices -l | head -n-1 | tail -n+2 | cat -ns'
alias add='adb devices -l'
alias acu='source ~/.android/current_serial ; adi'
alias adgp='adb shell getprop | sort'
alias adi="adb shell <<< ' getprop ro.product.model ; getprop ro.serialno ; getprop ro.build.version.incremental ; getprop ro.build.date; getprop service.adb.tcp.port ; id ; uptime ; ifconfig -S' ; "
adb_all() {
	setopt nomonitor
	target_devices=()
	if [[ $1 = -t || $1 = -s ]]; then
		target=$1
		while :; do
			shift
			target_devices+=($1)
			shift
			[[ $1 = $target ]] || break
		done
	fi
	[[ $1 = -t || $1 = -s ]] && { echo "Cannot use -t and -s at the same time."; return; }
	if [[ $target = -s ]]; then
		devices=( $( adb devices 2>$null | tail -n+2 | cut -f 1 ) )  
		cmd=$*
	else
		if [[ $1 = adb ]]; then
			shift
			cmd=$*
		else
			echo "Cannot target transport id for non-adb commands."
			return 1
		fi
		target="-t"
		devices=( $( adb devices -l | tail -n+2 | awk -F: '{print $(NF)}' ) )
	fi
	# typeset -p target_devices devices
	tmp_files=()
	tmp_dir=~/.logs/adb/$(date '+%F__%H.%M.%S')-${cmd//(#m)[[:space:]\/]/_}
	mkdir -p $tmp_dir

	for device in $devices; do 
		# typeset -p device
		real_serial=$( adb $target $device shell getprop ro.serialno )
		[[ -z $real_serial ]] && { 
			echo "$device:\tFailed to get serial for $device ($target)"
			continue
		}
		# TODO: Find something more "unique": MAC addresses, IMEI, etc.
		tmp_file=$tmp_dir/$real_serial-$device
		[[ $#target_devices -eq 0 ]] || (( $target_devices[(I)$device] )) && {
			tmp_files+=($tmp_file)
			( 
				{ 
					if [[ $target = "-s" ]]; then
						ANDROID_SERIAL=$device $=cmd
					else
						adb -t $device $=cmd 
					fi
				} |& tee $tmp_file | sed "s|^|$real_serial ($device):\t|" ) &
		}
	done
	wait

	for target_device in $target_devices; do 
		(( $devices[(I)$target_device] )) || 
			echo "WARNING: Target device $target $target_device not found."
	done
			
	# typeset -p tmp_files tmp_dir
	typeset -p tmp_dir
	echo nvim -d $tmp_dir/*
}

adb_device_n_disconnect() {
	adb_device_n &&
	adb disconnect $ANDROID_SERIAL
	adb_device_n
}

adb_device_n() {
	echo $( adb shell <<< ' getprop ro.product.model ; getprop ro.serialno ; getprop service.adb.tcp.port ; cmd wifi status | sed -nE "/Wifi is connected to \"(.*)\"$/s||\1|p" ' )
	typeset -p ANDROID_SERIAL
	adb reconnect offline ; sleep 0.1
	serials=( $( adb devices 2>/dev/null | tail -n+2 | cut -f 1 ) )
	(( #serials == 0 )) && { echo "No devices found."; return ; }
	integer n=$1
	(( n == 0 )) && [[ ${#serials} == 1 ]] && n=1
	(( n == 0 )) && { 
		{ for ((i = 1; i <= $#serials; i++)); do 
			setopt nomonitor
			(
				export ANDROID_SERIAL=${serials[i]}
				# print -u2 "Querying $ANDROID_SERIAL"
				real_serial=$( timeout 1 adb shell getprop ro.serialno 2> $null )
				[[ -z $real_serial ]] && { 
					print -u2 "$ANDROID_SERIAL: Failed to acquire real serial for $ANDROID_SERIAL"
					continue
				}
				user=$( adb shell id -un )
				model=$( adb shell getprop ro.product.model 2> $null )
				date=$( date '+%F %T' --date=@$( adb shell getprop ro.build.date.utc ) )
				version=$( for prop in  ro.build.version.release ro.build.version.incremental ro.vndk.version ro.kernel.version ro.build.version.codename ro.build.version.security_patch ; do adb shell getprop $prop; done | tr '\n' '\t' )
				ssids=$( echo $( adb shell cmd wifi list-scan-results | vd -f fixed --delimiter=, -b -o - 2>$null | xsv select SSID 2>$null | head -8 ) )
				print "$i\t$ANDROID_SERIAL\t$real_serial\t($user)\t$model\t$date\t$version\t($ssids)"
			)&
		done
		wait
	} | sort -n | column -ts $'\t' 
		echo -n "Enter device number: " ; read n ; 
	}
	(( n < 1 )) || (( n >= #serials )) && { print -u2 "Invalid device number"; return; }
	export ANDROID_SERIAL=${serials[$n]} && adi 
	export adb_real_serial=$( adb shell getprop ro.serialno 2>$null )
	typeset -p ANDROID_SERIAL adb_real_serial > ~/.android/current_serial
	adb forward --remove tcp:8022 2> $null
	adb forward tcp:8022 tcp:8022 > $null
	termux_ssh=(ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=off -o IdentitiesOnly=yes -o IdentityFile=$HOME/.ssh/keys/thc_termux_user -p 8022 $lo) 
	has adbfs && {
		adbfs_path=/ADBFS/$adb_real_serial
		$sudo umount -R $adbfs_path &> $null || true
		mountpoint -q $adbfs_path || {
			sudo -E mkdir -p $adbfs_path
			sudo -E adbfs -o allow_other -o auto_unmount $adbfs_path
		}
		echo ls -al $adbfs_path
		alias cda="cd $adbfs_path"
	}

	# zsh_prepend \$termux_ssh >$null
	# 
}
alias adn=adb_device_n 
alias adN=adb_device_n_disconnect
alias adnn=adb_device_n_disconnect
alias an=adb_device_n 
alias ad1="adb_device_n 1"
alias ad2="adb_device_n 2"
alias ads='adb shell'
alias admm='adb shell monkey -p $pkg 1'
alias adr='adb shell run-as $pkg'
alias ada='adb shell am start'
alias adss='adb shell am start -S'
alias adp='adb shell dumpsys'
alias adpp='adb shell dumpsys package'
alias addd='adb shell dumpsys'
alias aps='adb shell ps -Awf -T'
alias adps'adb-ps.sh'
alias adu='export ANDROID_SERIAL=$( adb -d get-serialno ) ; adi'
alias adm='export ANDROID_SERIAL=emulator-5554'
ash() {
	[ -z "$ANDROID_SERIAL" ] && ANDROID_SERIAL=$(adb get-serialno 2> /dev/null)
	[ -z "$ANDROID_SERIAL" ] && ( echo No Android device found...; exit 1 )
	type prompt_tag > /dev/null 2>&1 && prompt_tag "[ANDROID_SERIAL=$ANDROID_SERIAL]"
	echo $ANDROID_SERIAL: $@
	adb shell $@
}
alias a_=ash
a_pidof() { echo $(adb shell ps | grep "$@" | cut -c 9-15 ); }
a_pidof1() { echo $(adb shell ps | grep "$@" | cut -c 9-15 | head -1 ); }

# find
alias f=find
alias fBB='find . \( -type d -exec chmod -c 755 {} \; \) -o \( -type f -exec chmod -c 644 {} \; \)'
alias fBBB='find . \( -type d -exec chmod -c 700 {} \; \) -o \( -type f -exec chmod -c 600 {} \; \)'
alias fBBx='for f in $(find -type f); do file -L $f | grep -q -E ELF\|executable && chmod -c a+x $f; done || true'
alias fdd='f . -type d'
# alias ff='f . -type f'
alias ffn='ff -name'
alias fgr='f . | grep -i --color=auto '
alias lc='locate --ignore-case --existing --regex '
loc() { lc "$*" | grep --ignore-case --color "$*"; }
alias locl=lloc
lloc() { lc "$*" | sed -ne "s|$PWD|.|p" | grep --color "$*" ; }
lloc2() { locate --wholename --regexp="^$PWD"| sed -ne "s,^$PWD,.,p" | grep --color --fixed-strings "$*"; }
loce() { loc \\.$1\$; }
locee () { loc $1\$; }
locE() { loc $1\$; }
loCE() { loc $1\$; }
alias cq=copyq
alias df='\df -h | sort -k 6,6 | sed "/^Filesystem/d"'
# alias df='findmnt -D'

# git
alias g=git
alias gi=git
alias gf='git fetch'
alias gcm='git commit --verbose -m ""'
alias gC='git cherry --verbose'
alias gcn='git clean --dry-run'
alias gca='git commit --verbose --amend'
alias gcop='git checkout --patch'
alias gdf='noglob git diff --ext-diff --ignore-space-change --ignore-blank-lines'
alias gdff='noglob git diff --ext-diff --ignore-space-change --ignore-blank-lines -- .'
alias grp='git reset --patch'
# alias gst='git -c color.ui=always status -sb --show-stash'
alias gst='noglob git status -sb -- '
alias gst.='noglob git status -sb -- ./'
alias gstt='noglob git status -sb -- ./'
alias gs='noglob git status -sb -- ./'
alias gw='git worktree'
alias gwl='git worktree list'
alias glg='noglob git log'
# gst() {
#	local git_min_version="2.10.0"

# }
gcr() {
	set -x
	git clone --recursive --jobs=8 --verbose $1 &&
		cd ${${1:t}%%.git} &&
		$EDITOR .
	}

ghssh() {
	local dsh2_https_base='https://github.com/dsh2'
	local dsh2_ssh_base='git@github.com:dsh2'
	for remote in $(git remote); do
		remote_url=$(git remote get-url --push $remote)
		if [[ $remote_url =~ $dsh2_https_base ]]; then
			remote_url_new=${remote_url/$dsh2_https_base/$dsh2_ssh_base}
			echo Switching url \"$remote_url\" to \"$remote_url_new\"
			git remote set-url $remote --push $remote_url_new
		elif [[ $remote_url =~ $dsh2_ssh_base ]]; then
			remote_url_new=${remote_url/$dsh2_ssh_base/$dsh2_https_base}
			echo Switching url \"$remote_url\" to \"$remote_url_new\"
			git remote set-url $remote --push $remote_url_new
		else
			echo Skipping $remote_url
		fi
	done
}

alias gcrs='git clone --recursive --jobs=8 --verbose --shallow-submodules --depth 1'
alias gcrss='git clone --recursive --jobs=8 --verbose --shallow-submodules --no-single-branch --shallow-since="1 year ago"'
alias grv='git remote --verbose'
alias gfa='git fetch --all --tags --progress --verbose'
alias gco='git checkout'
alias gcom='git checkout ma'
alias gcol='git checkout local'
alias gA='mlocate -eb \\HEAD | while read p; do p=${p:h}; [[ -d $p/objects && -f $p/config ]] && echo $p; done'
alias gk='x0; gitk --date-order --all&'
alias gkk='v +"GV --all"'
alias gss='GIT_MODIFIED_FILES=$(git ls-files --modified) && [ -n $GIT_MODIFIED_FILES ] && $EDITOR $=GIT_MODIFIED_FILES +Gstatus +only'
alias gcp='git cherry-pick -x'
alias gcpa='git cherry-pick --abort'
alias gsl='git stash list -p'
alias gpp='git pull --recurse-submodules --jobs=8 && git submodule update --init --merge --recursive'
alias gppp='gpp && git push'
alias gaa='git apply --verbose --check --3way'
# TODO: add to fbr
alias gbb='git checkout $(git for-each-ref --format="%(color:red)%(objectname:short)%(color:reset) %(HEAD) (%(color:green)%(committerdate:format:%a %F %T) - %(committerdate:relative)%(color:reset)) %09 %(color:yellow)%(refname:short)%(color:reset) %09 %(contents:subject) (%(color:green)%(authorname)%(color:reset))" --sort=committerdate  | fzf --tac --tabstop=17 --preview="git log --color --graph --pretty=format:\"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset\" --abbrev-commit -p {1}" | cut -f 1 -d\  )'
alias gb='git branch'
alias gba='git branch -a -vv'
alias gcs='git config --show-origin'
alias gra='git rebase --abort'
alias grC='git rebase --continue'
alias grh='noglob git reset HEAD^'
alias grH='noglob git reset HEAD@{1}'
alias gsm='git submodule'
alias gsmp='git submodule foreach git pull'
alias gsmcm='git submodule foreach git checkout master'
alias gsmu='git submodule update --init --recursive'
alias gtl='git tag --sort=-taggerdate | head -1'
alias gci='git config --show-origin --get-regexp user.\*; git init && git add . && git commit -m "Initial commit"'

# ls
alias ls="$LS_COMMAND -Z --almost-all --escape --classify --color=always --time-style='+%F %T'"
alias l='ls -lh'
alias l1='ls -1'
alias lD='l --group-directories-first'
alias lt='l -tr'
alias lts='l -rS'
alias ltsh='l -rS -h'
alias ltr='ls -al **/*(.om) '
alias ltrD='ls -dal **/*(/om) '
alias lsd='l -d'
alias lS='ls -ahlSsr'
alias fre='free -hwt'
alias tt=set_terminal_title
alias vb=vboxmanage
alias tcp='sudo tcpdump -pUnni any icmp'
alias tcpd='sudo tcpdump -pUnni any icmp'
alias tcpD='sudo setcap cap_net_raw,cap_net_admin=eip /usr/sbin/tcpdump'
# alias tsk='pcap=~/.pcaps/tcpdump-$(nn).pcapng; tshark --capture-comment "" -qwnlpFpcapng -qwn -w - -i any | tee $pcap | tshark -t a --color -r -'
alias tsk='interface= any; filter="not port 22"; comment=""; pcap=~/.pcaps/$(nn)-$interface.pcapng; tshark -QwnlpFpcapng -w - --capture-comment "$comment" -i $interface $filter | tee $pcap | tshark --color -T tabs -lt a -r -  '
alias tskl='interface=any; filter="not port 22"; comment=""; pcap=~/.pcaps/$(nn)-$interface.pcapng; touch $pcap.txt; echo $pcap.txt; ( setopt nomonitor ; tshark -QwnlpFpcapng -w $pcap --capture-comment "$comment" -i $interface $filter ) & tmux split -p 99 "less +F $pcap.txt"; (trap "kill $!" INT EXIT; script -qfc "tshark -o protocols.display_byte_fields_with_spaces:\ false -o gui.column.format:\ \$columns -T tabs -lt a -r <(tail --pid=$! -c+0 -s0.1 -qF $pcap 2> /dev/null) --color" $pcap.txt ) > /dev/null'
alias tmH='tmux rename-session $(hostname)'
alias tskO='export columns='\''"Time", "%t", "No.", "%m", "Source", "%s", "Comment", "%Cus:frame.comment :0:R", "Destination", "%d", "Info", "%i", "Expert Info", "%Cus:_ws.expert.message:0:R", "f.proto", "%Cus:frame.protocols:0:R", "data.data", "%Cus:data.data:0:L"'\'''
# alias tsk='pcap=~/.pcaps/$(nn).pcapng; touch $pcap && tshark -i any --capture-comment "" -qwnlpfpcapng -w $pcap& tail -c0 -f $pcap | tshark --color -r - -c ssl '
alias tsc='capinfos -m -T ~/.pcaps/*.pcapng | column -nts,'
alias tskc='capinfos -m -T ~/.pcaps/*.pcapng | column -nts,'
# alias tsa='mergecap ~/.pcaps/*.pcapng(.rm-1) -w - | tshark -r - -qz io,phs'
alias tsa='mergecap ~/.pcaps/*.pcapng(.om[1]) -w - | tshark -r - -qz io,phs'
alias wsd='wireshark -r ~/.pcaps/*(.om[1])&'
alias wsa='wireshark -r $pcap&'
alias wgq=wg-quick
alias nmap='nmap -oA ~/.logs/nmap/log-$(nn) -p- '
alias nmr='nmap --resume ~/.logs/nmap/*.gnmap(.om[1])'
alias nmz='nmapfe ~/.logs/nmap/*.xml(.om[1])'
alias ln='ln -rsv'
alias lv='lnav -q'
alias lnn='lnav -q'
alias lna='lnav -q'
alias lvv='lnav -q'
alias lqq='lnav -q'
alias r=ranger
alias ra=ranger
alias ran=ranger
alias rD='ranger $(xdg-user-dir DOWNLOAD)'
alias zl='fc -rlEDt "%a %F  %T" 1 gg'
alias za='echo Sourcing ~/.aliases; time source ~/.aliases'
alias zs=zstyle
alias zz='echo exec $SHELL; exec $SHELL'
alias zzz='echo Sourcing ~/.zshrc; time source ~/.zshrc'
alias msf='./msfconsole --real-readline --quiet -r $HOME/.dotfiles/msfc.rc'
alias ms=msf
alias mkd='mkdir -p'
mkt() { TMP=tmp-$(nn); [[ -n $* ]] && TMP+=-${(q)*}; mkd $TMP; cd $TMP; }
mcd() {
	DIR=$*
	if [[ -z $DIR ]]; then
		echo usage: mcd NEWDIR
		return
	fi
	mkd $DIR && cd $DIR
}
alias mcdb='mcd BUILD-$(nn)'
alias mkp=mkd
alias goo=googler
alias wh='whence -sv'
alias whh=whence
alias prr=print
alias prl='print -rl -- '
alias prn='print -rn -- '
alias prv=printenv
alias j='jobs -l'
alias jk='kill ${${(v)jobstates##*:*:}%=*}'
alias jkk='kill -9 ${${(v)jobstates##*:*:}%=*}'
alias jk9=jkk
alias d='diff -u'
alias vf=vimdiff
alias vimd=vimdiff
alias wanip='dig +short myip.opendns.com ANY @resolver1.opendns.com'
alias wanipx='dig -x $(wanip)'
alias wanip2='curl -s https://checkip.amazonaws.com'
alias wanip2x='dig -x $(wanip2)'
alias wanip3='dig TXT +short o-o.myaddr.l.google.com @ns1.google.com'
alias lanip='for if in $(\ls -1 /sys/class/net); do if [ $if != "lo" -a $(cat /sys/class/net/$if/operstate) = "up" ]; then echo $if:\\t$(ifdata -pa $if); fi; done'
alias PV=print_variables
alias PVV=print_variables
alias pvv=print_variables
envof() { sed 's/\x0/\n/g' /proc/${1}/environ; }
alias va=vagrant
# alias va=variety
alias doc=docker
alias doo=docker
alias docc=docker-compose
alias dock=docker
alias wgk='{ wg genkey 1>&2 | wg pubkey | sed "s:^:PublicKey = :" 1>&3 } 2>&1 3>&2| sed "s:^:PrivateKey = :" 3>&-'
# Vim aliases
# alias v=vim
alias v=$EDITOR
gv() { gvim "$*"; raiseX; }
# alias vl='(cd ~/.tmux-log/; v *(.om[1]))'
viminfo() { $EDITOR -R -c "Info $1 $2" -c "bdelete 1" -c "setlocal nomodifiable" ; }
vimman() { $EDITOR -R -c "Man $1 $2" -c "bdelete 1" -c "setlocal nomodifiable" -c "map Q :cq<cr>" -c "set cursorline" "+silent! /example"; }
# vimman() { vimx -R -c "Man $1 $2" -c "bdelete 1" -c "setlocal nomodifiable" -c "map Q :cq<cr>" -c "set cursorline" "+silent! /example"; }
alias nv=nvim
alias m=vimman
alias mm="vimman \$(man -k . | fzf | sed -e 's,\(.*\) (\([^)]*\).*-.*,\1.\2,')"
alias q=qemu
alias qq=qemu-system-x86_64
alias qqi=qemu-system-i386
# alias qm='sudo qmicli -p -d /dev/cdc-wdm0'
alias qe=qemu-system-sparc64
alias qmi=qemu-img
alias qi=qemu-img
RUN() {
	# TODO
	# -Add option to run through watch to show diffs in output
	# -Measure runtime
	# -Log output in tmux-log or similar
	# -Press any key for manual run
	# o:=output_dir -output-dir:=output_dir \
	# t:=meassure_runtime -meassure-runtime:=meassure_runtime \
	local -a watch_objs
	if [ $# = 0 ] || ! zparseopts -D \
		w+:=watch_objs -watch+:=watch_objs \
		1=watch_run_objs \
		x=clear_screen c=clear_screen -clear=clear_screen \
		d=diff_output -diff-output=diff_output \
		s=skip_first_run -skip-first-run=skip_first_run \
		t=print_time -time=print_time \
		v=verbose -verbose=verbose \
		; then
			print "usage: RUN [--skip-first-run] [--watch_file file] executable [args]"
			return 1
	fi
	watch_objs=(${watch_objs:gs:--watch:::gs:-w::}) # HELP: This cannot be - by no means - zsh-idiomatics
	[[ $#watch_objs = 0 || -n $watch_run_objs ]] && watch_objs+=$1
	[[ -f $watch_objs[1] ]] || watch_objs[1]=$(whence $watch_objs[1])
	run_obj=$*
	[ -z $run_obj ] && { echo "Nothing to run."; return; }
	[ $#watch_objs = 0 ] && { echo "Nothing to watch."; return; }
	# TODO: Resolve target executable
	# [ ! -e $WATCH ] && WATCH=$(whence $WATCH)
	local tmp_out=$(mktemp -t RUN_XXXXXX)
	while :; do
		if [[ -z $skip_first_run ]]; then
			[[ -z $clear_screen ]] || clear -x
			[[ -z $verbose ]] || print -l "Watching: $watch_objs" "Running: $run_obj" "Output: $tmp_out"
			[[ -z $print_time ]] || print "Start: $(n)"
			print -P $LINE_SEPARATOR
			$=run_obj |& tee $tmp_out 
			err=$pipestatus[1]
			print -P $LINE_SEPARATOR
			(( err )) && err "err = $err"
			[[ -z $print_time ]] || print "Stop: $(n) err = $err"
		fi
		unset skip_first_run
		inotifywait -qqe attrib,move_self,modify $=watch_objs || { echo "inotifywait failed!" ; return ; }
		# TODO: check if run failed. Add options for sleep, ignore, abort, etc.
		sleep 0.1
	done
}

# Miscellaneous
# alias a=aws
alias a=adb
alias ad=adb
alias afs=adbfs
alias al='aws ec2'
alias ae='aws ec2'
alias e2='aws ec2'
alias ae2='aws ec2 describe-instances --query "Reservations[].Instances[].InstanceId" --output text --filter Name=ip-address,Values='
alias aeA='aws ec2 describe-instances --filter Name=instance-state-name,Values=running --query "Reservations[].Instances[].InstanceId" --output text'
alias aI='( for region in $(aws ec2 describe-regions --query "Regions[].RegionName" --output text); do aws --region $region ec2 describe-instances  | jq -r ".Reservations[].Instances[] | [.LaunchTime, .InstanceId, .ImageId, .InstanceType, .PublicIpAddress, .State.Name, [[.Tags[]?] | map(.Key + \"=\" + .Value) | .[] ] ] | flatten | @csv" | sed "s:^:$region,:"& done; wait ) | sort -k 2,1 | column -tns, | tr \" \ '
alias aeAT="aws ec2 terminate-instances --instance-ids \$(aeA) --output table"
alias aed="aws ec2 describe-instances --instance-ids"
# alias ac='aws cloudformation'
# alias ac='aws cognito-idp'
alias ax=autorandr
alias xx=xrandr
alias TCPTRACEOPTS_minimal='export TCPTRACEOPTS="--noshowdupack3 --noshowsacks --noshowrexmit --noshowoutorder"'
alias TCPTRACEOPTS_normal='export TCPTRACEOPTS='
alias Xreseed="dd if=/dev/urandom count=1 2> /dev/null | md5sum | sed -e 's,^\([! ]*\).*$,add :0 . \1,' | tee /dev/stderr | xauth"
alias le=$PAGER
alias el=$PAGER
alias psp='pstree -laps'
alias psme='pstree -ahups $$'
alias p_s='port search --line'
alias tm=tmux
alias tmda='tmux detach-client -a'
alias tma='if tmux has-session; then tmux attach; else tmux new-session -s ROOT -n top ; fi'
alias tmn='tmux new-session -t $(tmux list-sessions -F "#S"|head -1)'
# alias tmm='TAG_NAME=$(herbstclient attr tags.focus.name 2> /dev/null || i3-msg -t get_workspaces | jq -r ".[] | select(.focused == true) | .name" 2> /dev/null ) && if tmux has-session -t $TAG_NAME >/dev/null; then tmux attach-session -t $TAG_NAME; else tmux new-session -s $TAG_NAME -n $TAG_NAME; fi'
tmm() {
	TAG_NAME=$(has herbstclient && herbstclient attr tags.focus.name 2> /dev/null || i3-msg -t get_workspaces | jq -r ".[] | select(.focused == true) | .name" 2> /dev/null)
	TAG_NAME=$(echo $TAG_NAME | cut -d : -f 2-)
	if tmux has-session -t $TAG_NAME >/dev/null; then
		tmux attach-session -t $TAG_NAME
	else tmux new-session -s $TAG_NAME
	fi
}
alias tmk='for s in $(tmux list-sessions -F "#{session_name}"); do if [[ $s =~ "-[0-9]*$" ]]; then echo Killing session "$s"; tmux kill-session -t $s; fi; done'
alias tms='tmux source-file ~/.tmux.conf'
alias tmss='tcmd="tmux set -g status-style fg=colour$((RANDOM%255)),bg=colour$((RANDOM%255)); tmux set -g window-status-style fg=colour$((RANDOM%255))"; echo $tcmd; eval $tcmd'
alias tmo='for scope in server global window; do tmux show -${scope:0:1} | sed "s:^:$scope\: :"; done'
alias tmO='old_clients=$(tmux list-clients -F "#{client_activity},#{client_tty}" | sort | tail -n+2 | cut -d, -f2); if [ -n $old_clients ]; then for old_client in $old_clients; do tmux detach-client -t $old_client; done; else echo "No other tmux clients."; fi'
alias vp='vim -c "nmap Q :q!<cr>" -c "setlocal nomodifiable" -'
alias vpcsv='vim -c "let b:csv_headerline = 0" -c "set filetype=csv" -c "%CSVArrangeColumn!" -c "nmap Q :q!<cr>" -c "set nomodifiable" -'
alias vpp=vpcsv
alias tag=prompt_tag
# gw() { grep --color -Iwri -- "$@" *; }
alias grep='grep --color'
# alias pg='ping gdns |& lnav -qt'
alias pg='pgrep -ax'
alias acs='apt-cache search'
alias r22='rabin2 -gx'
alias pl='patool list'
alias pc='psql -c ""'
alias pC="psql -c ''"
alias px='patool extract'
alias pd='patool diff'
alias o=xdg-open
# alias q='qiv -uBfta '
alias bw='binwalk -veBAEJ -cf binwalk-log.csv '
alias xc='xclip -selection clipboard -in'
alias wp='echo -n $(powershell.exe Get-Clipboard)'
alias xcc='tmux show-buffer | xc'
alias XS='xset -b -c r rate 200 140 dpms 0 0 3600 s off; setxkbmap -layout us,de -option grp:alt_caps_toggle; xmodmap -e "keycode 94 = asciitilde asciitilde asciitilde asciitilde"'
alias M='make -j $(nproc)'
alias makev='make SHELL="PS4=__[MAKE]__\  \$\$SHELL -x"'
alias ndd=ndk-build
alias tss='typeset -p'
alias rh=rehash
alias ipp='ipython3 -i -- '
alias iz=ipython3
alias pz=python
alias p2=python2.7
alias ip='ip -c -o -d -s'
alias ip4='ip -4 -c -o -d -s'
alias 4ip='ip -4 -c -o -d -s'
alias ip6='ip -6 -c -o -d -s'
alias ip44='ip -6 -c -o -d -s'
alias 6ip='ip -6 -c -o -d -s'
alias ipr='\ip -c -o -d -s route show table all'
alias ipt='sudo iptables -nv'
alias ipta='sudo iptables -nv'
alias iptn='sudo iptables -nv -t nat'
alias iptL='sudo iptables -nvv --line-numbers -L'
alias iptl='sudo iptables -nvv --line-numbers -L'
alias ipts='for ipt in iptables ip6tables; do for table in security raw nat mangle filter ; do sudo $ipt -S -t $table | sed "s:^:-t $table :" ; done ; done'
alias ipl='\ip -c -o -d -s link show | column -t'
alias ipj='\ip -d -s -j -p'
alias ipln="\ip -j link show | jq -r '.[].ifname'"
alias nf=nft
# alias P='parallel -i $SHELL -c "echo {} {} |& stdbuf -oL sed \"s|^|{}-\$$:\\t|\"" -- $('
alias par=parallel
alias tc='tc -col'
yt() { printf "$*\nquit" | nc localhost 5038; }
xp() { echo "$*" | xc; }
alias d2u=dos2unix
alias bd=bindkey
alias bdl='bindkey -L'
alias kc='source ~/.keychain/*-sh(.om[1])'
alias G='gdb -q -ex "b main" -ex run --args '
alias Gdb='gdb -q -ex "b main" -ex run --args '
alias Gdbr='gdb -q -ex "target remote localhost:1234"'
alias Ga='gdb -q -ex "set verbose" -ex "set sysroot /" -ex "set remote interrupt-sequence Ctrl-C" -ex "target remote :2000"'
alias Gb='gdb --nh -q --batch -ex "'
alias GG='gdbserver :2000'
alias fcp='fc -P'
alias func=function
alias fuc=function
alias fncc=functions
alias funcc=functions
alias fcc=functions
alias fcP=zloc
alias rmzl='find . -name .zsh_local_history -print -delete'
alias sc='systemctl -l'
alias sca='sudo sysctl -A | fzf -m | tr -d " "'
alias SC='sudo fdfind . /sys | fzf --multi'
alias scc=sysctl
alias sct=sysctl
alias dp=dpkg
alias dpq=dpkg-query
alias n="date '+%F %H.%M.%S'"
alias N="date '+%F %H.%M.%S.%N'"
alias nn="date '+%F__%H.%M.%S'"
alias NN="date '+%F__%H.%M.%S.%N'"
# alias nn="date '+%F__%T'"
 # %H.%M.%S.%N
 alias nnn='N=$( echo 00 ) ; date '+%F__%T' --date=@$(( N / 1 ))'
alias tgi=telegram-cli
alias ncn='nmcli con'
alias ndn='nmcli con'
alias ncc=nmcli
alias ncnn='nmcli dev'
alias nd='nmcli dev'
alias ncnc='nmcli con'
# alias vv=voltron
alias vv=vboxmanage
# alias k='command kill --verbose'
# alias k='kill --verbose'
alias k='kill'
alias kk='kill -STOP '
alias pf=pidof
alias fu='sudo fuser -afuv'
# alias cs='killall -STOP chrome; echo -n Chrome sleeping....; cat ; echo CONT; killall -CONT chrome'
alias cs=screen
alias sd=sysdig
alias st='strace -yyttrfs 4096 '
alias stp='strace -yyttrfs 4096 -p '
alias stt='strace_log=$(mkt strace;pwd); strace -ffo $strace_log/strace -xttrfs 4096 ; (cd $strace_log; v *)'
alias sudo='sudo '
alias uu=uniq
alias e=echo
alias vis=sudoedit
alias xrr='while :; do xrandr --output eDP-1 --gamma 0.$(($RANDOM%8+2)):0.$(($RANDOM%8+2)):0.$(($RANDOM%8+2)); read; done'
alias xR='xrandr --output eDP-2 --gamma 1:1:1'
rl() { ff=( ${@:-.} ); for f in $ff; do file $f && readlink -f $f; done ; }

mvO() {
	for f in $*; do
		if [ -e $f-OFF ]; then
			mv -v -- $f-OFF $f
		elif [ -e $f ]; then
			if [ $f != ${f%-OFF} ]; then
				mv -v -- $f ${f%-OFF}
			else
				mv -v -- $f $f-OFF
			fi
		else
			echo \"$f\" not found.
		fi
	done
}
mvOO() { for f in $*; do mv -v -- $f $f-$(nn); done; }
mvOFF() { for f in $*; do mv -v -- $f $f-OFF; done; }
mvON() { for f in $*; do if [ -e $f-OFF ]; then mv -v -- $f-OFF $f; elif [ -e $f ]; then if [ $f != ${f%-OFF} ]; then mv -v -- $f ${f%-OFF}; else echo \"$f\" not off; fi; else echo \"$f\" not found; fi; done; }
alias sl='echo -e Loaded keys\\n-----------; ssh-add -l; echo -----------; setopt nopipefail; for key in ~/.ssh/hosts/**/*.key; do ssh-add -c $key; done'
alias sL='tabs 15; for key in /etc/ssh/ssh_host_*(.)pub; do print -n ${key:t}\\t; ssh-keygen -lf $key; done'
alias shk='( umask 077; ssh-keygen -t ed25519 -f id -N "" -C $USER@$HOST@ )'
alias skg='( umask 077; ssh-keygen -t ed25519 -f id -N "" -C $USER@$HOST@ )'
# alias sshl="ssh -p 22222 $USER@localhost"
alias sshl='ssh -o PermitLocalCommand=yes'
alias ssha=ssh-add
alias ssal='ssh-add -l'
alias sal='ssh-add -l'
alias sall='ssh-add -L'
alias salL='ssh-add -L'
alias saL='ssh-add -L'
alias ssa=ssh-add
alias ssk=ssh-keygen
alias sshx='ssh -O exit'
alias xssh='ssh -O exit'
alias xs='ssh -O exit'
rssh() { ssh -O check $1; ssh -O exit $1; ssh $1 id; ssh -O check $1; }
alias Rssh=rssh
alias Cssh='ssh -o ControlMaster=yes'
alias cssh='ssh -O check'
alias sshc='ssh -O check'
alias sshk='ssh-keyscan localhost 2> /dev/null | tee /dev/stderr | ssh-keygen -vlf - | sed "s:^[0-9]*:Fingerprint :"'
alias sshkl='ssh-keyscan localhost 2> /dev/null | tee /dev/stderr | ssh-keygen -vlf - | sed "s:^[0-9]*:Fingerprint :"'
alias sshc='ssh-copy-id -n -i ~/.ssh/id_rsa.pub'
alias sskg='echo ssh-keygen -t ed25519 -N "" -f id -C $USER@$HOSTNAME@'
alias sa='agents=(${TMPDIR:=/tmp}/ssh-*/agent.*(om)) ; typeset -p agents ; (( #agents > 0 )) && export SSH_AUTH_SOCK=$agents[1] && printenv SSH_AUTH_SOCK && ssh-add -L'
alias saa='printenv SSH_AUTH_SOCK'
alias sll='. ~/.keychain/$HOST-sh; sl'
alias Rl='ranger ~/INCOMING'
alias dcl='dynamic-colors cycle'
alias dd='dd status=progress conv=fdatasync'
# alias hc=herbstclient
alias hc=hcitool
alias cts=curl-tesseract
alias gdb='gdb -q'
alias x0='if [[ -z $DISPLAY ]]; then echo Setting DISPLAY. ; if [[ -z $SSH_CONNECTION ]]; then export DISPLAY=:0 ; else export DISPLAY=localhost:10.0; fi ; fi ; printenv DISPLAY'
alias x00='export DISPLAY=:0; printenv DISPLAY'
alias x000='export DISPLAY=localhost:10.0; printenv DISPLAY'
alias digx='dig -x'
alias dixx='dig -x'
alias digr='dig -x'
alias y=yum
alias ZS='sudo -E $SHELL'

src_index() {
    # find . \
	# -type f \
	# -name .repo -prune -o \
	# -name .git -prune -o \
	# -name out -prune -o \
	# -name build -prune -o \
	# -type f \( \
	    # -name '*.c' -o \
	    # -name '*.cc' -o \
	    # -name '*.cpp' -o \
	    # -name '*.h' -o \
	    # -name '*.hpp' \
	# \) > cscope.files
	setopt clobber
	# TODO: Does not work?
	# git ls-files -x '*.tff'
	git ls-files | grep -v 'tff$' > cscope.files
	cscope -bi cscope.files
}

alias s3=sqlite3
alias s3b='sqlitebrowser -R'
alias s3q='sqlitebrowser -R'
alias s3l='sqlitebrowser -R'
alias file='file -z'
alias d2='dnf-2'
alias sx='screen -X'
alias sxt='sx title'
alias ssv2csv="sed -re 's/([^ \"]*|\"[^\"]*\") /\1,/g; s/\"([^\"]*)\"/\1/g'"
alias slp=sleep
alias slpp='sleep 0.9'
alias rs=rsync
alias rsy=rsync
alias ry=rsync
alias ws=wireshark
alias wsl='wireshark -r ~/.pcaps/*.pcapng(om[1]) &'
# export WS_OPTIONS=(-o tcp.no_subdissector_on_error:false -d tcp.port==1-65535,ssl -o ssl.keylog_file:/home/dsf/PCAPS/all-pcaps.keylogfile)
# export WS_OPTIONS=(-o ssl.keylog_file:/home/dsf/PCAPS/all-pcaps.keylogfile)
alias lvs='tmux split -d lnav ssldebug'
alias tsv='truncate -s0 ssldebug'
alias ww='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:/dev/null -r cap.pcapng &'
alias wwss='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:/dev/stdout -r cap.pcapng'
alias wws='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:ssldebug -r cap.pcapng & truncate -s0 ssldebug'
alias wwso='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:ssldebug-orig -r cap.pcapng & truncate -s0 ssldebug-orig'
alias sshn='ssh -o ControlMaster=no -o ControlPath=/dev/null'
alias trim="sed -e 's,^[[:blank:]]*\(.*\)[[:blank:]],\1,'"
alias xpidof='xprop  _NET_WM_PID | cut -d= -f2 | trim'
alias xpf=xpidof
alias xps='ps axu gg $(xpidof)'
alias pss='gdb -batch -q -ex "set confirm off" -ex "set height 0" -ex "info shared" -ex "quit" -p '
alias gbt='gdb -batch -q -ex "set confirm off" -ex "set height 0" -ex "thread apply all bt" -ex "quit" -p '
# TODO: make C a zle binding
alias Q='cool-retro-term --fullscreen -e /usr/bin/tmux attach DN &; sleep 0.3; clear'
alias RR=reset
alias H='cd ~/.ssh'
alias 1='ping -c 100 -A 1.1.1.1'
alias p3n='ping ff02::1%'
alias p3r='ping ff02::2%'
alias p6n='ping ff02::1%'
alias p6r='ping ff02::2%'
alias 11='ping -W2 -c 100 -A 2606:4700:4700::1111'
alias 111='ping -W2 -i0.2 1.1.1.1'
alias 1n='nping -p 443 1.1.1.1'
alias 2='traceroute 1.1.1.1'
alias 3='dig one.one.one.one @1.1.1.1'
alias 4='dig one.one.one.one @127.0.0.1'
alias 8='ping -W 1 -c 100 -A 8.8.8.8'
alias 88='ping -W 1 -c 100 -A 2001:4860:4860::8888'
alias 8888='ping -W 1 -i0.2 8.8.8.8'
alias 888='8 | pre "IPv4: " & 88 | pre "IPv6: "'
alias 8n='nping --tcp-connect -p 443 8.8.8.8'
alias 9="ping -W 1 -c 1000 -A \$(ip -j route get 1.1.1.1 | jq -r \".[].gateway\")"
alias 99="ping -W 1 -c 1000 -i 0.5 \$(ip -j route get 1.1.1.1 | jq -r \".[].gateway\")"
alias 9n="nping --tcp-connect -p 80 -c 5 \$(ip -j route get 1.1.1.1 | jq -r \".[].gateway\")"
alias 89='paste <(8 -c 50) <(9 -c 50)'
alias 89n='paste <(8n -c 50) <(9n -c 50)'
# alias 0='ping $(\ip route show default | head -1 | sed -nE "s:^.* via ([.:0-9]*) .*$:\1:p") # ping next hop'
alias rf='rfkill block all'
alias rff=rfkill
alias rfw='rfkill unblock wifi'
alias rfW='rfkill block wifi'
alias rfb='rfkill unblock bluetooth'
alias rfB='rfkill block bluetooth'
alias uf='uftrace --no-pager'
alias ufr='uftrace --no-pager record -A . -R . '
alias se=set
# alias x='xeyes -outline \#$(rand_color) -fg \#$(rand_color) -center \#$(rand_color) $(rand_geom) &'
alias x=xeyes
alias vi=virsh
alias vir=virt-
alias vc=virt-customize
alias vcc='virt-customize -d $vm'
alias pk='pkill -ex'
alias ka='killall -v'
alias p.t="curl -s 'http://pass.telekom.de/' -H 'User-Agent: Mozilla/45.0 (X11; Linux x86_63)' | xmllint --html --xpath '/html/body/div[2]/div[2]/div[1]/div/div[3]' - 2> /dev/null | sed -e 's/<[^>]*>//g' "
alias mnt='mount -o ro'
# alias sdd=systemd
# alias ssd=systemd
# alias sy=systemd
alias sr=systemd-resolve
alias rc=systemd-resolve
alias gp=gpg
alias gpc=gpgconf
alias gpc=gpg-connect-agent
alias gpa=gpg-connect-agent
alias fm='findmnt --real --raw'
alias fmd='findmnt --df'
alias jr='journalctl -f -u'
alias jc=journalctl
alias jcc='journalctl -S -1m'
alias sf=sshfs
alias cu=curl
alias cur=curl
alias fj=frida
alias fr=frida
alias AA='xrandr --verbose --output DP-2-1 --auto --output DP-2-2 --auto --output DP-2-3 --auto --output eDP-1 --auto --output HDMI-2 --auto --output HDMI-1 --auto --output DP-2 --auto --output DP-1 --auto'
alias AO='xrandr --output HDMI-2 --off --output HDMI-1 --off --output DP-2 --off --output DP-1 --off --verbose --output DP-2-1 --off --output DP-2-2 --off --output DP-2-3 --off --output eDP-1 --auto'
alias xk='wmctrl -ic $(xwininfo| sed -nE "s/^.*Window id: (0x[0-9a-d]*).*$/\1/p")'
alias ci=criu
alias lsof='sudo lsof +c0 -P -n'
alias lsofi='sudo lsof +c0 -P -n -i :'
alias lsofil='sudo lsof +c0 -P -n -i -a -sTCP:LISTEN,'
alias lsofii='sudo lsof +c0 -P -n -i -a -sTCP:LISTEN,'
alias lsofp='sudo lsof +c0 -P -n -p'
alias fp=fping
alias dpp=docker-packer
alias pa=patool
alias s=ssh
alias psl="psql -Aqtc"
alias py3=python3
alias pod=podman
alias podd=podman-compose

settime() {
	set -e
	local url="https://1.1.1.1"
	local diff_ok=2
	local curl_time="$( curl --silent --output /dev/null --dump-header - $url | sed -n 's.^[Dd]ate: ..p' )"
	[ -z "$curl_time" ] && { echo "Failed to curl time from $url"; return 1; }
	local curl_time_seconds=$( date --date "$curl_time" '+%s' )
	local local_time=$( date -u '+%s' )
	local diff=$(( local_time - curl_time_seconds ))
	[ $diff -lt 0 ] && diff=$(( diff * -1 ))
	[ $diff -lt $diff_ok ] && { echo "Local time is ok (diff to $url is less than $diff_ok seconds)."; return 0; }
	echo "Local time has offset to $url of $diff seconds."
	[ "$update" != "yes" ] && { echo "Only dry-run. Set update=yes to update localtime."; return 0; }
	sudo date -u --set="$curl_time"
	echo "Successfully set local time."
}

alias setd='update=yes settime'
alias U=usbip
alias pe=printenv
# alias units="\units --verbose '"
alias u="\units --verbose '"
alias g2=grub2-
alias ssl=openssl

alias sss=sssh
sssh() {
	now() { date '+%s' }
	host=$1
	host_color=colour$[0x$(echo $host | md5sum | cut -c 1-2)%256]
	while :; do
		connect_time=$( now )
		ssh -t $host "if tmux has-session 2>/dev/null; then tmux attach; else tmux new-session \"tmux set-option -g status-bg $host_color; $SHELL\" ; fi " && break
		# TODO: Update to notify-send.py?
		(( $( now ) - connect_time > 5 )) || {
			notify-send -u critical "Lost connection to \"$host\"."
			slp=$(( (2 + $RANDOM % 19) / 3.4 ))
			printf "Trying to reconnect to \"$host\" in %.2f seconds: " $slp | ts -m '[%F %T]'
			sleep $slp
		}
	done
}

mssh=(localhost)
mssh() {
	while [[ $1 = -* ]]; do ssh_opt+=$1; shift; done
	mssh_cmd=$*
	[[ -z $mssh_cmd ]] && { echo "usage: mssh CMD (for hosts from env mssh)"; return 1; }
	setopt nomonitor
	local o=$(mktemp -dp . tmp-mssh-$(nn)-XXXXX)
	typeset -p mssh_cmd > $o/cmd
	# Dynamic tabs skrew up the output of fzf on tmux-log
	# local y=( /(e'{reply=("$mssh[@]")}'nOe'{REPLY=$#REPLY}') ); tabs $(( $#y[1] + 1 ))
	local h; for h in $mssh; do
		ssh -o ConnectionAttempts=3 \
			-o ConnectTimeout=1 \
			-o BatchMode=yes \
			$ssh_opt $h $@ |& tee $o/$h | sed "s:^:$h\t:" &
		# Try to archive mostly sorted output but still
		# allow laggy host to not delay overall execution
		sleep 0.1
	done
	wait
}

alias zzzz='while :; do print -n .; sleep 0.2; done'
alias Z=zzzz
alias ZZ=zzzz
alias b=bridge
# alias p3='python3.8'
alias p3=python3
alias tsh=tshark
alias nw=notmuch
alias i3m='i3-msg -s $(echo /var/run/user/1000/i3/ipc-socket*(om[1]))'
# i3t() { i3-msg -s $(echo /var/run/user/1000/i3/ipc-socket*(om[1])) rename workspace to $1; i3-ws-enum ; }
alias ki=kitty
alias kit=kitty
alias K=kitty
alias dnp='noglob dnf provides */'
TT() { nvim +'norm i' term://"$*" ; }
T() { nvim term://"$*" ; }
alias ng=noglob
alias Pi='ping -D -W 1 -i 0.2 '
alias gvv='nvim +GV\ --all'
alias nmm='nm --defined-only -l'
alias mz=mausezahn
alias ns=netsniff-ng
alias i=ip
alias pst='pstree -lp'
alias ne=neomutt
alias V=v4l2ctrl
alias zat='zathura --fork'
alias dm='sudo dmsetup'
alias cr=cryptsetup
alias cry=cryptsetup
alias PI='pip3 install --user -vvv'
alias ju=jupyter
alias ptp=ptpython
alias rzsh='sudo HOME=$HOME zsh'
alias rz='sudo -E HOME=$HOME zsh'
alias xdft='xdg-mime query filetype '
alias xdft='xdg-mime query filetype '
alias sup=supermin
alias chx='sudo chmod +x'
alias chnox='sudo chmod -Rc -x'
alias chnx='sudo chmod -Rc -x'
alias chmer='sudo chown -c -R $(id -u):$(id -g) .'
alias chme='sudo chown -c $(id -u):$(id -g)'
alias chu='sudo chown -c $(command stat -c "%U:%G" .) .'
alias chur='sudo chown -c -R $(command stat -c "%U:%G" .) .'

alias lo='losetup --find --show'
alias los=losetup 

SB() { supermin -v --build $1 --include-packagelist -f ext2 -o ${1%.s}.a ; }
xdD() {
	[ $# = 2 ] || { echo "xdD example_file program"; return ; }
	xdg-mime default ${2##*/} $(xdg-mime query filetype $1)
}
alias cdz=fzc

alias sq=seq
alias ca=cat
pad() { patool create $1.tgz $1 ; }
# TODO: find base85/91 implementation
padd() { tar czf - $* | base64 | $=XC ; }
paxx() { $=XP | base64 -d -i | tar xkzvf - ; }
paxp() { cat | base64 -d -i | tar xkzvf - ; }
alias PA="$XP"
cvv() { setopt pipefail; dir=$(dirs -l -p -v | fzf | cut -f 2) && cd $dir || echo "$funcstack[1] aborted..." ; }
alias cvc=cvv
alias xi=xinput
alias xin=xinput
alias os=openssl
alias xq='xset q'
alias blc=bluetoothctl
alias bl=bluetoothctl
alias cm=command
alias cmd=command
alias un=unset
alias uns=unset
alias unse=unset
alias unsp='export PAGER='
alias psc='ps -O ppid,cgroup, '
alias torr=torsocks
alias um='sudo umount'
alias umt='sudo umount'
alias F=frida
alias ic=icomera_scraper
alias mn=mount
alias mo='mount -o ro'
alias mt='mount -o ro'
alias expo=export
alias exp=export
alias ex=export
alias ep=export
alias po=podman
alias tso=tsocks
alias oss=openssl
alias osl=openssl
alias r22='rax2 -s'
alias yy=yarn
alias zx=zargs
alias zxx='zargs -P $(nproc)'
alias rax='rax2 -s'
alias sqll=sqlite3

# alias scr='scrcpy --select-usb --disable-screensaver --turn-screen-off --shortcut-mod=rctrl+lctrl'
# alias scr='scrcpy --disable-screensaver --turn-screen-off --shortcut-mod=rctrl&'
# alias scrr='scrcpy --disable-screensaver --shortcut-mod=rctrl+lctrl&'
alias dme='dmesg -e'
alias R=rclone
alias rk=rclone
alias rcl=rclone
alias da=date
alias tailf='tail -fc+0'
alias L=leg
alias xo=xdotool
alias xd=xdotool
alias xdo=xdotool
alias p0='print -N'
alias p0v='print -N **/*(/l2) | xargs -0 -P $(nproc)'
alias ct=crontab
alias ud=udevadm
alias ude=udevadm
alias so=socat
alias soc=socat
alias sha=sha512sum
alias chr=chronyc
alias zm='noglob zmv -n'
alias gl=gitlab
alias pyg=pygmentize
alias asc=asciidoc
alias fa=firewall-cmd
alias xmls=xmlstarlet
alias lf=lftp
alias WHY='2>$N find / -xdev -type f -mtime -10 -size +1M -print0 | xargs -0 -r ls -aSrlh'
alias mod=modprobe
alias HH='hostname -A'
alias gz=gzip
alias dms='dmesg -Tw | lnav -q'
alias zc='zcalc -e'
alias zc='noglob zcalc -e'
PX() {
	pp="http_proxy https_proxy ftp_proxy all_proxy HTTP_PROXY HTTPS_PROXY"
	if [ -z $http_proxy ]; then
		local e
		for p in $=pp; do
			e+="export $p=http://127.0.0.1:8888; "
		done
		echo $e
		eval $e
	else
		eval unset $pp
		echo "Proxy OFF";
	fi
}
alias alsa=alsactl
alias us='usermod -aG network $USER'
alias SL='ZSH_PREPEND="ssh $( sed -nE '\''$s|^.* (.*)@(.*):(.*)|-p \3 \1@\2|p'\'' ~/.ssh/host_history)"'
alias SM='ssh -R localhost:2299:localhost:22 $( sed -nE '\''$s|^.* (.*)@(.*):(.*)|-p \3 \1@\2|p'\'' ~/.ssh/host_history)"'
alias ffm=ffmpeg
alias ltmp='l -dt tmp-*'
alias yd='noglob yt-dlp -vo $(nn)_'
alias a1=asn1tools
alias acc='asn1tools convert -i gser -o ber '
alias acp='asn1tools parse '
alias no_spaces='mv_s() { for f in $@; do fs=${f:gs. ._.}; [[ $fs != $f ]] && mv -vi $f $fs; done }; mv_s **/*(/N); mv_s **/*(.);'
alias xss=xssh
alias sou=source
alias em=emulator
alias eme=emerge
alias sour=source
alias snn=snmp
alias snnt=snmptranslate
alias ssn=snmp
alias zd=zstd
alias bb=bitbake
alias s1=sha1sum
alias s5=sha512sum
alias zk='ykman -d $ykserial'
alias yk='ykman -d $ykserial'
alias rmDS='ls -al -- **/._* **/.DS_Store(N)'
alias dirdiff='v "+DirDiff '
alias ddiff='v "+DirDiff '
alias ff=fossil
alias ffo='fossil open'
alias ffc='fossil close'
alias ffh='fossil help'
alias ffb='fossil branch'
alias ffa='fossil add'
alias ffc='fossil commit'
alias fss='fossil'
alias vd3='vd -f sqlite'
alias vds='vd -f sqlite'
alias rss=rssh
alias fo=for
alias m3=m365
alias nb=nbdkit
alias bri=bridge
alias bi='bridge link show'
alias mutt=neomutt
alias i2='ip -4'
alias i22='ip -6'
alias ems='emerge -S'
alias B=btrfs
alias Bs='btrfs subvolume'
alias Bss='btrfs subvolume snapshot'
alias Bf='btrfs filesystem'
alias bt=btrfs
alias btr=btrfs
alias gr='./gradlew'
alias grr='./gradlew --info --parallel --continuous --console plain '
alias f2='sudo fail2ban-client status'

alias ok=openstack
alias oka='openstack availability zone list --long'
alias okb='openstack volume backup list --long'
alias okf='openstack floating ip list'
alias okfl='openstack floating ip list --long'
alias oki='openstack image list --long'
alias okn='openstack network list --long'
alias oks='openstack server list --long'
alias oksg='openstack security group list'
alias okv='openstack volume list --long'

alias fb=fastboot
alias fas=fastboot
alias fl=fastboot
alias tr1x="for i in \$(seq 32); do ping -W 1 -c 1 -t \$i 1.1; done |& sed -nE 's|^From ([0-9a-f.:]*[0-9a-f]+).*exceeded.*|\1|p' | while read ip; do echo \"\$ip (\$(dig +short -x \$ip | tr '\n' ' ' | tr -dc '[:print:]'))\"; done"
alias in='inotifywait -qm'
alias pid='pgrep -a -u $(id -u)'
alias pgm='pgrep -a -u $(id -u)'
alias wpa=wpa_cli
alias nbb=nbd-client
alias res=resolvectl
alias rr='resolvectl query'
alias pgt='pgrep -a -t ${TTY#/dev/}'
alias pts='pgrep -a -t pts/'
alias ptsl='pgrep -a -t ${$( tmux_neighbor_tty left )/\/dev\/}'
alias ptsa='pgrep -a -t ${$( tmux_neighbor_tty above )/\/dev\/}'
alias ptsr='pgrep -a -t ${$( tmux_neighbor_tty right )/\/dev\/}'
alias ptsb='pgrep -a -t ${$( tmux_neighbor_tty below )/\/dev\/}'
alias sk=ssh-keygen
alias findm=findmnt
alias dn=dnf
alias xa='sudo getfattr -d -m .\* -R .'
alias cal='cal -wm'
alias ari=aria2c
alias ans=ansible
alias emu=emulator
alias mp='noglob mpv -v'
alias mpf='noglob mpv -fullscreen -v'
alias btb=btrbk
alias btk=btrbk
alias btt=btrbk
alias sem=semanage
# alias gru=grubby
# alias gr=grubby
alias ge=getent
alias pin=ping
alias sys=systool
alias lp=lpa
alias la=lpa
alias cpr='cp --reflink=always'
alias dif=diff
alias iper=iperf
alias mtr='command mtr --interval 5 --curses --displaymode 2 1.1.1.1'
alias cdr='cd $REPO_ROOT'
alias cdrr='cd $REPO_ROOT/.repo/manifests'
alias rp=rpm
alias ssf=sshfs
alias DUP='sudo duperemove --hashfile=duperemove.hashfile -rdh . |& ts -m "[%F %T]" '
alias re=repo
alias rep='repo --color=never --trace-to-stderr --no-pager'
alias reps='repo status -j 8 -v -o'
alias mn=mount
alias ni=ninja
alias nin=ninja
alias nj=ninja
alias blk=blkid
alias bli='sudo blkid'
alias btdu='btrfs filesystem du -s *'
alias wa='watch -d -n 0.4'
alias waa='watch -d -n 4'
alias grl=gradle
alias dun='dunstctl is-paused'
alias no=notify-send
alias lsb='lsblk --fs -o +FSSIZE'
alias dr=dracut
alias dra=dracut
alias sw=swapo
alias ak='adb shell killall -vw'
alias apg='adb shell pgrep -l -f'
# alias zp='zsh_prepend= '
alias zpp='echo $zsh_prepend | tee ~/.zsh_prepend'
alias zp=zsh_prepend
zsh_prepend() { zsh_prepend=$*  ; zpp}
alias arpp=arp-scan
alias nmc=nmcli
alias AN='adb_all adb shell'
alias AD=adb_all
alias ADS='adb_all scrcpy --turn-screen-off --disable-screensaver --shortcut-mod=rctrl&'
alias ADF='adb_all scrcpy --turn-screen-off --disable-screensaver --shortcut-mod=rctrl&'
alias AS='export ANDROID_SERIAL='
alias p1=p11tool
alias p11=p11tool
alias oc=oscap
alias fw=fwupdmgr 
alias mok=mokutil 
alias xpr=xpra
alias xpp=xpra
alias xpr=xpra
alias whi=while
alias adL="adb_all"
alias adLl="adb_all shell"
alias adLL="adb_all shell"
alias unsa='unset ANDROID_SERIAL'
alias unss='unset SSH_AUTH_SOCK'
alias E='noglob echo'
alias exa='export ANDROID_SERIAL=$( echo ); adb connect $ANDROID_SERIAL'
alias ha=hashcat
alias IP=install_path
alias scp='rsync -axP --bwlimit=0.9m'
alias sR='ssh-keygen -R'
alias cer=certutil
alias cert=certutil
alias fwk=fwknop
alias hy=hydra
alias ipc=ipcalc
alias eth=ethtool
alias fpi=fping
alias vnc=vncviewer
alias ngr='noglob ngr_sql'
alias ngg='noglob ngr_sql'
alias nggg='noglob ngr_sql_remote'
alias ngrr='noglob ngr_sql_remote'
alias cer=certutil
alias cert=certutil
alias fwk=fwknop
alias hy=hydra
alias wge=wget
alias diffo=diffoscope
alias ev=eval
alias wge=wget
alias adD='eval $( < ~/.android/current_serial >&2 )'
alias zco=zcompile
alias adms='adb shell dmesg -T -w | lnav -t'
alias admsg='adb shell dmesg -T -w | lnav -t'
alias chm='chmod -Rc'
alias th='test_host='
DO() { while :; do $*; echo $(nn): $* ; sleep 1; done; }
alias core=coredumpctl
alias rest='restorecon -v'
