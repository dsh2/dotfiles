UNAME=$(uname)

if [ "$UNAME" = "Darwin" ]; then
# TODO: check if gnu core utils is installed
    alias find=gfind
    alias locate=glocate
    alias ls=gls
    alias sed=gsed
    alias tac=gtac
    # Switch profile of running iTerm2 window
    it2prof() { echo -e "\033]50;SetProfile=$@\a"; }
fi

if [ $OSTYPE = "cygwin" ]; then
    alias sudo="cygstart --action=runas"
fi

# Change directory
alias .....='cd ../../../..'
alias ....='cd ../../..'
alias ...='cd ../..'
alias ..='cd ..'
alias cdd=popd
cdp() {
    CD_PIDS=(${=$(pidof "$*")})
    if [ -n "$CD_PIDS[1]" ]; then
        cd /proc/${CD_PIDS[1]}
        if [ -n "$CD_PIDS[2]" ]; then
            echo CD_PIDS = $CD_PIDS
        fi
    else
        echo no process matched \"$*\". Changing to proc root...
        cd /proc/
    fi
}
compdef _pids cdp

cd() { 
    if ! builtin cd $* 2> /dev/null; then 
        builtin cd $(dirname "$*"); 
    fi; 
}
cb() { if DIR=$(dirs -lp | uniq | tac | fzf --prompt="recent dirs: "); then echo $DIR; cd $DIR; else echo Abort.; fi }
alias cv=cb

source ~/.dotfiles/z/z.sh

# AOSP
alias aosp='cd "$AOSP_HOME" && source build/envsetup.sh && export OUT_DIR_COMMON_BASE="$AOSP_HOME/out.$MYHOSTNAME"'
alias adbk='adb shell input keyboard text'
alias adl='adb logcat -v threadtime ThermalEngine:S DownloadManagerWrapper:S WifiConfigStore:S wpa_supplicant:S NewsWeather:S WifiStateMachine:S WifiService:S |& lnav -w ~/.logs/adb-logcat/$(date "+%F-%T").log'
alias adll='adb logcat -v threadtime |& lnav -w ~/.logs/adb-logcat/$(date "+%F-%T").log'
alias add='adb devices -l'
alias ads='adb shell '
alias aps='adb shell ps '
ash() {
	    [ -z "$ANDROID_SERIAL" ] && ANDROID_SERIAL=$(adb get-serialno 2> /dev/null)
	    [ -z "$ANDROID_SERIAL" ] && ( echo No Android device found...; exit 1 )
	    type prompt_tag > /dev/null 2>&1 && prompt_tag "[ANDROID_SERIAL=$ANDROID_SERIAL]"
	    echo $ANDROID_SERIAL: $@
	    adb shell $@
}
alias a_=ash
a_pidof() { echo $(adb shell ps | grep "$@" | cut -c 9-15 ); }
a_pidof1() { echo $(adb shell ps | grep "$@" | cut -c 9-15 | head -1 ); }

# find
alias f=find
loc() { locate "$*" | grep --color "$*"; }
alias fdd='f . -type d'
alias ff='f . -type f'
alias ffn='ff -name'
gffn() { ffn "$1" -exec grep --color=auto -HE "$2" {} \; ; }
alias fgr='f . | grep -i --color=auto '
locl() { loc "$PWD/$*" ; }

# git
alias g=git
alias gap='git add -pv && git commit -v'
alias gc='git commit -v'
alias gcv=gc
alias gca='git commit -va'
alias gcop='git checkout --patch'
alias gdf='git diff'
alias grp='git reset --patch'
alias gst='git status -sb --show-stash'
alias gcr='git clone --recursive --jobs=8 --verbose'
alias grv='git remote --verbose'
alias gfa='git fetch --all --tags --progress --verbose'
alias gco='git checkout'
alias gcom='git checkout master'
alias gk='gitk --all&'
alias gkk='vim +GV'
alias gss='vim . +Gstatus'
alias gcp='git cherry-pick'
alias gpp='git pull --recurse-submodules --jobs=8'
alias gaa='git apply --verbose --check --3way'
# TODO: add to fbr
alias gbb='git for-each-ref --format="%(HEAD) %(color:red)%(objectname:short)%(color:reset) (%(color:green)%(committerdate:local) - %(committerdate:relative)%(color:reset)) %09 %(color:yellow)%(refname:short)%(color:reset) %(contents:subject) (%(color:green)%(authorname)%(color:reset))" --sort=committerdate '
alias gcs='git config --show-origin'
alias gra='git rebase --abort'
alias gri='git rebase -i HEAD~10'

# ls
l() {
    \ls \
        --almost-all \
        --author \
        --color=always \
        --file-type \
        --format=long \
        --indicator-style=slash \
        --quoting-style=shell \
        --time-style='+%F %T' \
        "$@";
}
alias ls='l --format=across'
alias lD='l --group-directories-first'
alias lt='l -tr'
alias lts='l -rS'
alias ltsh='l -rS -h'
alias ltr=lt
alias lsd='l -d'
alias fr='fc -R'
alias lnn=lnav
alias r=ranger
alias za='echo Sourcing ~/.aliases; time source ~/.aliases'
alias zz='echo Sourcing ~/.zshrc; time source ~/.zshrc'
alias msf='./msfconsole --real-readline --quiet -r /home/dsf/.dotfiles/msfc.rc'
alias ms=msf
alias mkd='mkdir -p'
mkt() { TMP=tmp-$(nn); mkd $TMP; cd $TMP; }
alias mkp=mkd
alias goo=googler
alias wh='whence -sv'
alias whh=whence 
alias prr=print
alias prl='print -l'
alias j=jobs
alias jk='kill ${${(v)jobstates##*:*:}%=*}'
alias d='diff -u'

# Vim aliases
alias v='vim -X'
vs() { v "$1" && echo -e "\nSourcing \"$1\"..."; time source "$1"; echo -e "\nDone sourcing \"$1\"...";}
alias v.=vs
gv() { gvim "$*"; raiseX; }
alias last='v -S ~/.vim/lastsession'
alias glast='gv -S ~/.vim/lastsession'
alias vl='(cd ~/.tmux-log/; v *(.om[1]))'

viminfo() { vim -R -c "Info $1 $2" -c "bdelete 1" -c "setlocal nomodifiable" ; }
vimman() { vim -R -c "Man $1 $2" -c "bdelete 1" -c "setlocal nomodifiable" -c "set cursorline" "+/example"; }

compdef _man vimman
run() {
    print Running \"$*\"...
    print Start: $(n)
    $* 
    print err = $?
    print Stop: $(n)
    print -P $LINE_SEPARATOR
}

RUN() {
    [ -z $1 ] && { echo Nothing to run.; return; }
    if [ $1 = "--watch" -o $1 = "-w" ]; then
        WATCH=$2
        shift 2
    else 
        WATCH=$1
    fi
    [ -z $WATCH ] && { echo Nothing to watch.; return; }
    [ -z $1 ] && { echo Nothing to run.; return; }
    clear -x
    run $*
    while true; do 
        if inotifywait -q -e move_self -e modify $WATCH > /dev/null ; then
            sleep 0.1; 
            clear -x
            run $*
        fi;
        sleep 0.1; 
    done
}

# Miscellaneous
alias o=exo-open
alias TCPTRACEOPTS_minimal='export TCPTRACEOPTS="--noshowdupack3 --noshowsacks --noshowrexmit --noshowoutorder"'
alias TCPTRACEOPTS_normal='export TCPTRACEOPTS='
alias Xreseed="dd if=/dev/urandom count=1 2> /dev/null | md5sum | sed -e 's,^\([! ]*\).*$,add :0 . \1,' | tee /dev/stderr | xauth"
alias le=$PAGER
alias m=vimman
alias p='ps -afx | grep -i --color'
pp() { ps Axjww|grep -i "$*"|grep -v grep; }
ppp() { ps Axjwwe|grep -i "$*"|grep -v grep; }
alias pst='pstree -g3'
alias pt='pstree -s'
alias p_s='port search --line'
alias tm=tmux
alias tma='tmux attach'
alias tmn='tmux new-session -t $(tmux list-sessions -F "#S"|head -1)'
alias vp='vim -c "nmap Q :q!<cr>" -c "setlocal nomodifiable" -'
alias vpcsv='vim -c "let b:csv_headerline = 0" -c "set filetype=csv" -c "%CSVArrangeColumn!" -c "nmap Q :q!<cr>" -c "set nomodifiable" -'
alias vpp=vpcsv
alias rm='trash -v'
alias rmm='\rm'
alias tl='trash-list|fzf'
alias tag=prompt_tag
#g() { grep --color -Inri -- "$@" *; }
gw() { grep --color -Iwri -- "$@" *; }
alias grep='grep --color'
alias -g gg='|& grep -i --color -- '
alias -g ggs='|& strings | grep -i --color '
alias -g ggv='|& grep -v '
alias pg='ping gdns |& lnav -t'
alias acs='apt-cache search'
alias agi='sudo apt-get install --fix-missing -y '
alias agii='sudo apt install --fix-missing -y $(apt-cache dump | \grep --color "^Package: " | cut -c 10- |&fzf --ansi --multi --sort --preview-window=top:50% --preview "apt-cache show {}")'
alias p_ss='sudo port install -v $(port list | fzf --multi --sort --preview-window=top:50%:wrap --preview "port info {1}" --bind "ctrl-g:execute(port gohome {1})" | cut -f 1)'
alias agr='sudo apt remove $(dpkg-query --show --showformat="\${Package}\\t\${db:Status-Abbrev} \${Version} (\${Installed-Size})\t\${binary:Summary}\n" | fzf --tabstop=40 --sort --multi --preview-window=top:50% --preview "apt-cache show {1}" | cut -f 1)'
alias r22='rabin2 -gx'
alias pl='patool list'
alias px='patool extract'
alias pd='patool diff'
alias aa='alias|fzf' # TODO: make this a zle filter
alias q='qiv -uBfta '
alias bw='binwalk -veBAEJ -cf binwalk-log.csv '
alias xc='xclip -selection clipboard -in'
alias xcc='tmux show-buffer | xc'
xp() { echo "$*" | xc }
alias M=make
alias ndd=ndk-build
alias tss=typeset
alias rh=rehash
alias ipp='ipython3 -- '
alias ip='ip -c'
yt() { echo -e $* \\nquit | nc localhost 5038 }

alias Gdb='gdb -q -ex "b main" -ex run --args '
alias Ga='gdb -q -ex "set verbose" -ex "set sysroot /" -ex "set remote interrupt-sequence Ctrl-C" -ex "target remote :2000"'
alias G='gdbserver :2000'
GG() { 
	(while true; do 
		print -P $LINE_SEPARATOR
		print "[$(n)] Launching \"$*\""
		print -P $LINE_SEPARATOR
		G $* 
		print -P $LINE_SEPARATOR
		print "Restarting gdbserver"
		sleep 1
	done) &
	while true; do 
		read 
		print "Killing gdbserver"
		kill $(pidof gdbserver)
		kill ${${(v)jobstates##*:*:}%=*} 
		return 
		sleep 1
	done 
}

alias cloc='locate .zsh_local_history | xargs grep --color '
alias zloc='fc -p .zsh_local_history'
alias fcp='fc -P'
alias func=function
alias fuc=function
alias fncc=functions
alias funcc=functions
alias fcc=functions
alias fcP=zloc
alias rmzl='find . -name .zsh_local_history -exec rm {} \;'
alias -g xr='|xxd -r -p'
alias sc=systemctl 
alias scc=sysctl 
alias sct=sysctl
alias dp=dpkg
alias dpl='dpkg -L'
alias dps='dpkg -S'
alias dpq=dpkg-query
alias n="date '+%F %T'"
alias nn="date '+%F_%T'"
alias tgi=telegram-cli
alias tgii='/home/dsf/Downloads/tsetup.1.1.23/Telegram/Telegram'
alias ncn=nmcli
alias ncc=nmcli
alias ncnn='nmcli dev'
alias ncnc='nmcli con'
alias hx='hexdump -C'
alias vv=voltron
alias k=kill
alias pf=pidof
compdef _ps pf
compdef _ps pidof
alias fu=fuser
alias cs='killall -STOP chrome; echo -n Chrome sleeping....; cat ; echo CONT; killall -CONT chrome'
alias s=stat
alias wl='wc -l'
alias suu='sort | uniq'
alias uu=uniq
alias lv=lnav
alias e=echo 
alias tf='grc tail -f /var/log/messages &'
alias tff='lnav /var/log/messages'
alias vis=sudoedit
alias xrr='while :; do xrandr --output eDP-1 --gamma 0.$(($RANDOM%8+2)):0.$(($RANDOM%8+2)):0.$(($RANDOM%8+2)); read; done'
alias xR='xrandr --output eDP-2 --gamma 1:1:1'
rl() { file "$*" && readlink -f "$*"; }

src_index() {
    find . \
        -name .repo -prune -o \
        -name .git -prune -o \
        -name out -prune -o \
        -name build -prune -o \
        -type f \( \
            -name '*.c' -o \
            -name '*.cc' -o \
            -name '*.cpp' -o \
            -name '*.h' -o \
            -name '*.hpp' \
        \) > cscope.files && command cscope -bi cscope.files;
}

alias s3='/usr/local/bin/sqlite3'
alias file='file -z'
alias d2='dnf-2'
alias sx='screen -X'
alias sxt='sx title'
alias ssv2csv="sed -re 's/([^ \"]*|\"[^\"]*\") /\1,/g; s/\"([^\"]*)\"/\1/g'"
alias -g ss2s="|sed -re 's/[[:space:]]+/ /g'"
alias -g ss2c="|sed -re 's/[[:space:]]+/,/g'"
alias -g ss2t="|sed -re 's/[[:space:]]+/\t/g'"
alias -g ss2tt="|sed -re 's/[[:space:]]{2,}/\t/g'"
alias -g sd2t="|sed -re 's/ - /\t/'"
alias -g DN="> /dev/null"
alias -g DN2="2> /dev/null"
alias -g DNN="> /dev/null 2>&1"
alias -g DA='| sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"'
alias w=wireshark
export WS_OPTIONS=(-o tcp.no_subdissector_on_error:false -d tcp.port==1-65535,ssl -o ssl.keylog_file:/home/dsf/PCAPS/all-pcaps.keylogfile)
alias lvs='tmux split -d lnav ssldebug'
alias tsv='truncate -s0 ssldebug'
alias ww='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:/dev/null -r cap.pcapng &'
alias wwss='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:/dev/stdout -r cap.pcapng'
alias wws='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:ssldebug -r cap.pcapng & truncate -s0 ssldebug'
alias wwso='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:ssldebug-orig -r cap.pcapng & truncate -s0 ssldebug-orig'
alias trim="sed -e 's,^[[:blank:]]*\(.*\)[[:blank:]],\1,'"
alias xpidof='xprop  _NET_WM_PID | cut -d= -f2 | trim'
alias xpf=xpidof
alias xps='ps axu gg $(xpidof)'
alias pss='gdb -batch -q -ex "set confirm off" -ex "set height 0" -ex "info shared" -ex "quit" -p '
alias gbt='gdb -batch -q -ex "set confirm off" -ex "set height 0" -ex "thread apply all bt" -ex "quit" -p '
jobs_wait() { while [ $( jobs | wc -l) -gt $1 ]; do sleep 1; done; }
# vim: se ft=sh:
