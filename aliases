UNAME=$(uname)

LS_COMMAND=ls
if [ "$UNAME" = "Darwin" ]; then
# TODO: check if gnu core utils is installed
    alias find=gfind
    alias locate=glocate
    LS_COMMAND=gls
    alias sed=gsed
    alias tac=gtac
    # Switch profile of running iTerm2 window
    it2prof() { printf '\033]50;SetProfile=$@\a'; }
fi

if [ "$OSTYPE" = "cygwin" ]; then
    alias sudo="cygstart --action=runas"
fi

# Change directory
alias ....='cd ../../..'
alias ...='cd ../..'
alias ..='cd ..'
alias cdd=popd
cdp() {
    CD_PIDS=(${=$(pidof "$*")})
    if [ -n "$CD_PIDS[1]" ]; then
        cd /proc/${CD_PIDS[1]}
        if [ -n "$CD_PIDS[2]" ]; then
            echo CD_PIDS = $CD_PIDS
        fi
    else
        echo no process matched \"$*\". Changing to proc root...
        cd /proc/
    fi
}
compdef _pids cdp

cd() { 
	if ! builtin cd $* 2>/dev/null; then
		if [ -e $* ]; then
			dir=$(dirname $*)
			if [ $dir = "." ]; then
				print WARNING: no directory change
			else 
				builtin cd $dir
			fi
		else
			echo Cannot change to \"$*\"
		fi
	fi
}

alias cdd='cd ~/.dotfiles'
cb() { if DIR=$(dirs -lp | uniq | tac | fzf --prompt="recent dirs: "); then echo $DIR; cd $DIR; else echo Abort.; fi }
alias cv=cb

source ~/.dotfiles/z/z.sh

# AOSP
alias aosp='cd "$AOSP_HOME" && source build/envsetup.sh && export OUT_DIR_COMMON_BASE="$AOSP_HOME/out.$MYHOSTNAME"'
alias adbk='adb shell input keyboard text'
alias adl='adb logcat -v threadtime ThermalEngine:S DownloadManagerWrapper:S WifiConfigStore:S wpa_supplicant:S NewsWeather:S WifiStateMachine:S WifiService:S |& lnav -w ~/.logs/adb-logcat/$(date "+%F-%T").log'
alias adll='adb logcat -v threadtime |& lnav -w ~/.logs/adb-logcat/$(date "+%F-%T").log'
alias add='adb devices -l'
alias ads='adb shell '
alias aps='adb shell ps '
ash() {
	    [ -z "$ANDROID_SERIAL" ] && ANDROID_SERIAL=$(adb get-serialno 2> /dev/null)
	    [ -z "$ANDROID_SERIAL" ] && ( echo No Android device found...; exit 1 )
	    type prompt_tag > /dev/null 2>&1 && prompt_tag "[ANDROID_SERIAL=$ANDROID_SERIAL]"
	    echo $ANDROID_SERIAL: $@
	    adb shell $@
}
alias a_=ash
a_pidof() { echo $(adb shell ps | grep "$@" | cut -c 9-15 ); }
a_pidof1() { echo $(adb shell ps | grep "$@" | cut -c 9-15 | head -1 ); }

# find
alias f=find
loc() { locate "$*" | grep --color "$*"; }
alias fdd='f . -type d'
alias ff='f . -type f'
alias ffn='ff -name'
gffn() { ffn "$1" -exec grep --color=auto -HE "$2" {} \; ; }
alias fgr='f . | grep -i --color=auto '
locl() { loc "$PWD/$*" ; }

# git
alias g=git
alias gap='git add -pv && git commit -v'
alias gc='git commit -v'
alias gcv=gc
alias gca='git commit -va'
alias gcop='git checkout --patch'
alias gdf='git diff'
alias grp='git reset --patch'
# alias gst='git -c color.ui=always status -sb --show-stash'
alias gst='git status -sb --show-stash -- '
alias gstt='gst .'
gcr() { set -x; git clone --recursive --jobs=8 --verbose $1 && cd ${1:t} && ranger .}
alias gcrs='git clone --recursive --jobs=8 --verbose --shallow-submodules --depth 1'
alias grv='git remote --verbose'
alias gfa='git fetch --all --tags --progress --verbose'
alias gco='git checkout'
alias gcom='git checkout master'
alias gk='gitk --all&'
alias gkk='v +GV'
alias gss='GIT_MODIFIED_FILES=$(git ls-files --modified) && [ -n $GIT_MODIFIED_FILES ] && vim $=GIT_MODIFIED_FILES +Gstatus +only'
alias gcp='git cherry-pick'
alias gpp='git pull --recurse-submodules --jobs=8 && git submodule update --init --merge --recursive'
alias gppp='gpp && git push'
alias gaa='git apply --verbose --check --3way'
# TODO: add to fbr
alias gbb='git checkout $(git for-each-ref --color=always --format="%(color:red)%(objectname:short)%(color:reset) %(HEAD) (%(color:green)%(committerdate:format:%a %F %T) - %(committerdate:relative)%(color:reset)) %09 %(color:yellow)%(refname:short)%(color:reset) %09 %(contents:subject) (%(color:green)%(authorname)%(color:reset))" --sort=committerdate  | fzf --tac --tabstop=15 --preview="git log --color --graph --pretty=format:\"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset\" --abbrev-commit -p {1}" | cut -f 1 -d\  )'
alias gba='git branch -a -vv'
alias gcs='git config --show-origin'
alias gra='git rebase --abort'
alias gri='git rebase -i HEAD~10'
alias gsm='git submodule' 
alias gl='git lg | less'
alias glssh='git remote set-url origin $(git remote get-url --push origin | sed -e "s,.*/\([^/]*\)/\(.*\),git@github.com:\1/\2.git,")'
alias gci='git init && git add . && git commit -m "Initial commit"'

# ls
alias ls="$LS_COMMAND --almost-all --escape --classify --color=always --time-style='+%F %T'"
alias l='ls -l'
alias l1='ls -1'
alias lD='l --group-directories-first'
alias lt='l -tr'
alias lts='l -rS'
alias ltsh='l -rS -h'
alias ltr='ls -al **/*(.om) '
alias ltrD='ls -dal **/*(/om) '
alias lsd='l -d'
alias fr='fc -R'
alias tt=set_terminal_title
alias nmn='targets=(); excludes=(); for if in $(command ls -1 /sys/class/net); do if [ $if != "lo" -a $(cat /sys/class/net/$if/operstate) = "up" ]; then targets+=$(ifdata -pN $if)/24; excludes+=$(ifdata -pa $if); fi; done ; print_variables targets excludes; nmap -PS2222 -p- -oA ~/.nmap/log-$(nn) --exclude ${(j-,-)excludes} ${(j- -)targets}'
alias nmap='nmap -oA ~/.nmap/log-$(nn)'
alias nmr='nmap --resume ~/.nmap/*.gnmap(.om[1])'
alias nmz='nmapfe ~/.nmap/*.xml(.om[1])'
alias ln='ln -rsv'
alias lnn=lnav
alias r=ranger
alias rD='ranger $(xdg-user-dir DOWNLOAD)'
alias zl='fc -rlEDt "%a %F  %T" 1 gg'
alias za='echo Sourcing ~/.aliases; time source ~/.aliases'
alias zs=zstyle
alias zz='echo Sourcing ~/.zshrc; time source ~/.zshrc'
alias msf='./msfconsole --real-readline --quiet -r /home/dsf/.dotfiles/msfc.rc'
alias ms=msf
alias mkd='mkdir -p'
mkt() { TMP=tmp-$(nn); [[ -n $* ]] && TMP+=-${(q)*}; mkd $TMP; cd $TMP; }
mcd() { 
    DIR=$*
    if [[ -z $DIR ]]; then 
	echo usage: mcd NEWDIR
	return
    fi
    mkd $DIR && cd $DIR
}
alias mkp=mkd
alias goo=googler
alias wh='whence -sv'
alias whh=whence 
alias prr=print
alias prl='print -rl -- '
alias j='jobs -l'
alias jk='kill ${${(v)jobstates##*:*:}%=*}'
alias jkk='kill -9 ${${(v)jobstates##*:*:}%=*}'
alias jk9=jkk
alias d='diff -u'
alias vf=vimdiff
alias vd=vimdiff
alias wanip='dig +short myip.opendns.com @resolver1.opendns.com'
alias lanip='for if in $(\ls -1 /sys/class/net); do if [ $if != "lo" -a $(cat /sys/class/net/$if/operstate) = "up" ]; then echo $if:\\t$(ifdata -pa $if); fi; done'
alias pvv=print_variables
envof() { sed 's/\x0/\n/g' /proc/${1}/environ; }

# Vim aliases
alias v='vim -X'
# alias v=vim
gv() { gvim "$*"; raiseX; }
# alias vl='(cd ~/.tmux-log/; v *(.om[1]))'
alias vl='v ~/.tmux-log/*(.om[1])'
alias vll='v *(.om[1])'
alias cl='cat ~/.tmux-log/*(.om[1])'
viminfo() { vim -R -c "Info $1 $2" -c "bdelete 1" -c "setlocal nomodifiable" ; }
vimman() { vim -R -c "Man $1 $2" -c "bdelete 1" -c "setlocal nomodifiable" -c "map Q :cq<cr>" -c "set cursorline" "+/example"; }
alias m=vimman
alias mm="vimman \$(man -k . | fzf | sed -e 's,\(.*\) (\([^)]*\).*-.*,\1.\2,')"
compdef _man vimman

run() {
    print Running \"$*\"...
    print Start: $(n)
    print -P $LINE_SEPARATOR
    $* 
    err=$?
    print -P $LINE_SEPARATOR
    print Stop: $(n)
    print err = $err
    print -P $LINE_SEPARATOR
    return $err
}

RUN() {
    # TODO
    # -Run through watch to show diffs in output
    # -Measure runtime 
    # -Log output in tmux-log or similar
    # -Option to clear -x or not

    if ! zparseopts -D \
	D=DEBUG -debug=DEBUG \
	w+:=WATCH_OBJS -watch+:=WATCH_OBJS \
	d=DIFF_OUTPUT -diff-output=DIFF_OUTPUT \
	o:=OUTPUT_DIR -output-dir:=OUTPUT_DIR \
	t:=MEASSURE_RUNTIME -meassure-runtime:=MEASSURE_RUNTIME \
	v=VERBOSE -verbose=VERBOSE ;
    then
	print ERROR: Failed to parse command line.
	return
    fi
    # [[ -n $DEBUG ]] && set_debug
    WATCH_OBJS=${WATCH_OBJS:gs:--watch:::gs:-w::} # HELP: This cannot be - by no means - zsh-idiomatics
    print_variables WATCH_OBJS 
    prl REST: $* 
    [ -z $1 ] && { echo Nothing to run.; return; }
    [ -z $WATCH_OBJS ] && { echo Nothing to watch.; return; }
    # [ ! -e $WATCH ] && WATCH=$(whence $WATCH) 
    # echo Watching \"$WATCH\"...
    # [ ! -x $WATCH ] && { echo Watch from path not executable; return; }
    [ -z $1 ] && { echo Nothing to run.; return; }

    clear -x
    run $*
    while true; do 
        if ! inotifywait -q -e move_self -e modify $=WATCH_OBJS > /dev/null ; then
	    echo inotifywait failed!
	    return
	fi
	clear -x
	sleep 0.1
	run $*
	# TODO: check if run failed. Add options for sleep, ignore, abort, etc.
	sleep 0.1
    done
}

# Miscellaneous
alias o=exo-open
alias ax=autorandr
alias xx=xrandr
alias TCPTRACEOPTS_minimal='export TCPTRACEOPTS="--noshowdupack3 --noshowsacks --noshowrexmit --noshowoutorder"'
alias TCPTRACEOPTS_normal='export TCPTRACEOPTS='
alias Xreseed="dd if=/dev/urandom count=1 2> /dev/null | md5sum | sed -e 's,^\([! ]*\).*$,add :0 . \1,' | tee /dev/stderr | xauth"
alias le=$PAGER
# TODO
# -use zsh prepend
alias pst='vim -c "nmap q :q!<cr>" +ProcessTree' 
alias pstt='vim -c "nmap q :q!<cr>" +ProcessTree +FzfLines'
p() { 
    pattern=$*
    pattern=${pattern:gfs,  , ,:gs, ,.\*,}
    grep --color=always -e "$pattern" =( ps aux )
}
pp() {
	pst "+/$*" "+FzfLines $*"
}
alias psp='pstree -laps'
alias p_s='port search --line'
alias tm=tmux
alias tma='tmux attach'
alias tmn='tmux new-session -t $(tmux list-sessions -F "#S"|head -1)'
alias tmm='TAG_NAME=$(herbstclient attr tags.focus.name) && if tmux has-session -t $TAG_NAME >/dev/null; then tmux attach-session -t $TAG_NAME; else tmux new-session -s $TAG_NAME -n $TAG_NAME; fi'
alias tmk='for s in $(tmux list-sessions -F "#{session_name}"); do if [[ $s =~ "-[0-9]*$" ]]; then echo Killing session "$s"; tmux kill-session -t $s; fi; done'
alias vp='vim -c "nmap Q :q!<cr>" -c "setlocal nomodifiable" -'
alias vpcsv='vim -c "let b:csv_headerline = 0" -c "set filetype=csv" -c "%CSVArrangeColumn!" -c "nmap Q :q!<cr>" -c "set nomodifiable" -'
alias vpp=vpcsv
alias rm='trash -v --'
alias rmm='\rm'
alias tl='cd $(trash-list|sort|fzf --tac|cut -d\  -f 3); restore-trash; cd -'
alias tag=prompt_tag
#g() { grep --color -Inri -- "$@" *; }
gw() { grep --color -Iwri -- "$@" *; }
alias grep='grep --color'
alias -g gg='|& grep -i --color -- '
alias -g ggs='|& strings | grep -i --color '
alias -g ggv='|& grep -v '
alias pg='ping gdns |& lnav -t'
alias acs='apt-cache search'
alias agi='sudo apt-get install --fix-missing -y '
alias agii='sudo apt install --fix-missing -y $(apt-cache dump | \grep --color "^Package: " | cut -c 10- |&fzf --ansi --multi --preview-window=top:50% --query="!:i386$ " --preview "apt-cache show {}"); rehash'
alias p_ss='sudo port install -v $(port list | fzf --multi --sort --preview-window=top:50%:wrap --preview "port info {1}" --bind "ctrl-g:execute(port gohome {1})" | cut -f 1)'
alias agr='sudo apt remove $(dpkg-query --show --showformat="\${Package}\\t\${db:Status-Abbrev} \${Version} (\${Installed-Size})\t\${binary:Summary}\n" | fzf --tabstop=40 --sort --multi --preview-window=top:50% --preview "apt-cache show {1}" | cut -f 1)'
alias r22='rabin2 -gx'
alias pl='patool list'
alias px='patool extract'
alias pd='patool diff'
alias q='qiv -uBfta '
alias bw='binwalk -veBAEJ -cf binwalk-log.csv '
alias xc='xclip -selection clipboard -in'
alias xcc='tmux show-buffer | xc'
xp() { echo "$*" | xc; }
alias M=make
alias makev='make SHELL="PS4=__[MAKE]__\  \$\$SHELL -x"'
alias ndd=ndk-build
alias tss=typeset
alias rh=rehash
alias ipp='ipython3 -- '
alias pz=python
alias ip='ip -c'
yt() { printf "$*\nquit" | nc localhost 5038; }
alias d2u=dos2unix
alias bd=bindkey
alias bdl='bindkey -L'
alias kc='source ~/.keychain/*-sh(.om[1])'
alias Gdb='gdb -q -ex "b main" -ex run --args '
alias Ga='gdb -q -ex "set verbose" -ex "set sysroot /" -ex "set remote interrupt-sequence Ctrl-C" -ex "target remote :2000"'
alias G='gdbserver :2000'
GG() { 
	(while true; do 
		print -P $LINE_SEPARATOR
		print "[$(n)] Launching \"$*\""
		print -P $LINE_SEPARATOR
		G $* 
		print -P $LINE_SEPARATOR
		print "Restarting gdbserver"
		sleep 1
	done) &
	while true; do 
		read 
		print "Killing gdbserver"
		kill $(pidof gdbserver)
		kill ${${(v)jobstates##*:*:}%=*} 
		return 
		sleep 1
	done 
}

cloc() { 
    locate --existing -0 .zsh_local_history | 
	xargs -0 grep --color=always --line-number -e "$*" |
	sort -k 2
}

clocd() { 
    locate --existing -0 .zsh_local_history | 
	xargs -0 grep --files-with-matches -e "$*" |
	sort -u
}

clocdf() { 
    cd $(clocd $* | 
	fzf --preview "
	    grep --color=always -e "$*" {}
    ")
}
alias df='df -h'
alias zloc='fc -p .zsh_local_history'
alias fcp='fc -P'
alias func=function
alias fuc=function
alias fncc=functions
alias funcc=functions
alias fcc=functions
alias fcP=zloc
alias rmzl='find . -name .zsh_local_history -exec rm {} \;'
alias rmT='find . -name tmp-20\* -exec trash -v -- {} \; -prune'
alias -g xr='|xxd -r -p'
alias -g hs="|hexdump -v -e '1/1 \"%02x:\"' | sed -e 's,:$,\n,'"
alias sc=systemctl 
alias scc=sysctl 
alias sct=sysctl
alias dp=dpkg
dpl() { apt-cache show $* && dpkg -L $*}
compdef _command_names dpl
dpL() { dpl $(dps $(whh $*) 1>&2 | cut -d: -f 1) }
compdef _command_names dpL
alias dps='dpkg -S'
alias dpq=dpkg-query
alias n="date '+%F %T'"
alias nn="date '+%F_%T'"
alias tgi=telegram-cli
alias ncn=nmcli
alias ncc=nmcli
alias ncnn='nmcli dev'
alias ncnc='nmcli con'
alias hx='hexdump -C'
alias vv=voltron
alias k=kill
alias kk='kill -STOP '
alias pf=pidof
compdef _ps pf
compdef _ps pidof
alias fu=fuser
alias cs='killall -STOP chrome; echo -n Chrome sleeping....; cat ; echo CONT; killall -CONT chrome'
alias s=stat
alias sd=sysdig
alias st='strace -a $(($COLUMNS - 12)) -r -f'
alias sudo='sudo '
alias uu=uniq
alias lv=lnav
alias e=echo 
alias tf='grc tail -f /var/log/messages &'
alias tff='(cd /var/log; sudo lnav -r messages auth.log fail2ban.log)'
alias vis=sudoedit
alias xrr='while :; do xrandr --output eDP-1 --gamma 0.$(($RANDOM%8+2)):0.$(($RANDOM%8+2)):0.$(($RANDOM%8+2)); read; done'
alias xR='xrandr --output eDP-2 --gamma 1:1:1'
rl() { file "$*" && readlink -f "$*"; }
mvOFF() { for f in $*; do mv -v -- $f $f-OFF; done; }
alias mvO=mvOFF
mvON() { for f in *-OFF; do mv -v -- $f ${f%-OFF}; done; }
alias sl='echo -e Loaded keys\\n-----------; ssh-add -l; echo -----------; setopt nopipefail; for key in ~/.ssh/hosts/**/*.key; do ssh-add $key; done'
alias sll='. ~/.keychain/dsf-debian-sh; sl'
alias Rl='ranger ~/Downloads'
alias dcl='dynamic-colors cycle'
alias hc=herbstclient
curl-tesseract() { 
	curl --silent --output - "$@" |
		tesseract -l eng -l deu - -
}
alias cts=curl-tesseract
alias gdb='gdb -q'
alias c=cat

src_index() {
    find . \
        -name .repo -prune -o \
        -name .git -prune -o \
        -name out -prune -o \
        -name build -prune -o \
        -type f \( \
            -name '*.c' -o \
            -name '*.cc' -o \
            -name '*.cpp' -o \
            -name '*.h' -o \
            -name '*.hpp' \
        \) > cscope.files && command cscope -bi cscope.files;
}

D() { set -x; $*; set +x }
alias Dl='ls -l ~/Downloads/*(.om[1])'
alias Dlp='px ~/Downloads/*(.om[1])'
alias Dll='Dlp && r *(/om[1])'
# TODO: rename Downloads to INCOMING
alias s3='/usr/local/bin/sqlite3'
alias file='file -z'
alias d2='dnf-2'
alias sx='screen -X'
alias sxt='sx title'
alias ssv2csv="sed -re 's/([^ \"]*|\"[^\"]*\") /\1,/g; s/\"([^\"]*)\"/\1/g'"
alias slp=sleep
alias -g SS2S="|sed -re 's/\s+/ /g'"
alias -g SS2C="|sed -re 's/[[:space:]]+/,/g'"
alias -g SS2T="|sed -re 's/[[:space:]]+/\t/g'"
alias -g SS2TT="|sed -re 's/[[:space:]]{2,}/\t/g'"
alias -g SD2T="|sed -re 's/ - /\t/'"
alias -g TS="| ts -m '[%F %T]'"
alias -g DN="> /dev/null"
alias -g DN2="2> /dev/null"
alias -g DNN="> /dev/null 2>&1"
alias -g SE="2>&1"
alias -g DA='| sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"' # Delete ANSI (mostly)
alias -g WL=' | wc -l'
alias -g SUU='| sort | uniq'
# TODO: This is not elegant.
alias -g SQ=' | tr "\n\t" "  " | tr -s " " | sed -e "s/^  *//"; echo '
alias -g LV=' |& lnav'
ut2nt() { date -d@$1 '+%F %T'}

alias ws=wireshark
# export WS_OPTIONS=(-o tcp.no_subdissector_on_error:false -d tcp.port==1-65535,ssl -o ssl.keylog_file:/home/dsf/PCAPS/all-pcaps.keylogfile)
export WS_OPTIONS=(-o ssl.keylog_file:/home/dsf/PCAPS/all-pcaps.keylogfile)
alias lvs='tmux split -d lnav ssldebug'
alias tsv='truncate -s0 ssldebug'
alias ww='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:/dev/null -r cap.pcapng &'
alias wwss='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:/dev/stdout -r cap.pcapng'
alias wws='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:ssldebug -r cap.pcapng & truncate -s0 ssldebug'
alias wwso='${WIRESHARK:-wireshark} $=WS_OPTIONS $=WS_DISABLE_PROTO -o ssl.debug_file:ssldebug-orig -r cap.pcapng & truncate -s0 ssldebug-orig'
alias sshn='ssh -o ControlMaster=no -o ControlPath=/dev/null'
alias trim="sed -e 's,^[[:blank:]]*\(.*\)[[:blank:]],\1,'"
alias xpidof='xprop  _NET_WM_PID | cut -d= -f2 | trim'
alias xpf=xpidof
alias xps='ps axu gg $(xpidof)'
alias pss='gdb -batch -q -ex "set confirm off" -ex "set height 0" -ex "info shared" -ex "quit" -p '
alias gbt='gdb -batch -q -ex "set confirm off" -ex "set height 0" -ex "thread apply all bt" -ex "quit" -p '
alias C='cool-retro-term --fullscreen -e /usr/bin/tmux attach DN &'
# TODO: make C a zle binding
jobs_wait() { while [ $( jobs | wc -l) -gt $1 ]; do sleep 1; done; }
cdo() { for d in *(/); do ( $SHELL -ci "cd $d; $*" | sed -e 's,^,'$d':\t,' ) done; }
faketty() { script -qfc "$(printf "%q " "$@")"; }

alias rf='rfkill block all'
alias rfw='rfkill unblock wifi'

# vim: se ft=sh:
